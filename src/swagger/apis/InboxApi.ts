/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  CreateInboxOrder200Response,
  CreateInboxOrder200ResponseFromJSON,
  CreateInboxOrder200ResponseToJSON,
  ErrorResponse,
  ErrorResponseFromJSON,
  ErrorResponseToJSON,
  GetActiveInboxOrdersResponse,
  GetActiveInboxOrdersResponseFromJSON,
  GetActiveInboxOrdersResponseToJSON,
  InboxOrderParams,
  InboxOrderParamsFromJSON,
  InboxOrderParamsToJSON,
} from "../models";

export interface CreateInboxOrderRequest {
  inboxOrderParams: InboxOrderParams;
}

export interface DeactivateInboxOrderRequest {
  id: string;
}

export interface DeleteInboxOrderRequest {
  id: string;
}

export interface GetInboxOrdersRequest {
  take?: number;
  skip?: number;
}

/**
 *
 */
export class InboxApi extends runtime.BaseAPI {
  /**
   * Create a new inbox order
   */
  async createInboxOrderRaw(
    requestParameters: CreateInboxOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<CreateInboxOrder200Response>> {
    if (
      requestParameters.inboxOrderParams === null ||
      requestParameters.inboxOrderParams === undefined
    ) {
      throw new runtime.RequiredError(
        "inboxOrderParams",
        "Required parameter requestParameters.inboxOrderParams was null or undefined when calling createInboxOrder."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["x-brkrz-client-id"] =
        this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["x-access-token"] =
        this.configuration.apiKey("x-access-token"); // idToken authentication
    }

    const response = await this.request(
      {
        path: `/inboxOrders`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: InboxOrderParamsToJSON(requestParameters.inboxOrderParams),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateInboxOrder200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Create a new inbox order
   */
  async createInboxOrder(
    requestParameters: CreateInboxOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<CreateInboxOrder200Response> {
    const response = await this.createInboxOrderRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Set an inbox order inactive, but NOT deleted. Inactive inbox orders will not be shown to the user anymore.
   */
  async deactivateInboxOrderRaw(
    requestParameters: DeactivateInboxOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deactivateInboxOrder."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["x-brkrz-client-id"] =
        this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["x-access-token"] =
        this.configuration.apiKey("x-access-token"); // idToken authentication
    }

    const response = await this.request(
      {
        path: `/inboxOrders/{id}/deactivate`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Set an inbox order inactive, but NOT deleted. Inactive inbox orders will not be shown to the user anymore.
   */
  async deactivateInboxOrder(
    requestParameters: DeactivateInboxOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<void> {
    await this.deactivateInboxOrderRaw(requestParameters, initOverrides);
  }

  /**
   * Delete an inbox order from the database
   */
  async deleteInboxOrderRaw(
    requestParameters: DeleteInboxOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteInboxOrder."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["x-brkrz-client-id"] =
        this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["x-access-token"] =
        this.configuration.apiKey("x-access-token"); // idToken authentication
    }

    const response = await this.request(
      {
        path: `/inboxOrders/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete an inbox order from the database
   */
  async deleteInboxOrder(
    requestParameters: DeleteInboxOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<void> {
    await this.deleteInboxOrderRaw(requestParameters, initOverrides);
  }

  /**
   * Returns active inbox orders for a specific user in the specified pagination
   */
  async getInboxOrdersRaw(
    requestParameters: GetInboxOrdersRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<GetActiveInboxOrdersResponse>> {
    const queryParameters: any = {};

    if (requestParameters.take !== undefined) {
      queryParameters["take"] = requestParameters.take;
    }

    if (requestParameters.skip !== undefined) {
      queryParameters["skip"] = requestParameters.skip;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["x-brkrz-client-id"] =
        this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["x-access-token"] =
        this.configuration.apiKey("x-access-token"); // idToken authentication
    }

    const response = await this.request(
      {
        path: `/inboxOrders`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetActiveInboxOrdersResponseFromJSON(jsonValue)
    );
  }

  /**
   * Returns active inbox orders for a specific user in the specified pagination
   */
  async getInboxOrders(
    requestParameters: GetInboxOrdersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<GetActiveInboxOrdersResponse> {
    const response = await this.getInboxOrdersRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
