/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage easily with a unified interface.  # user accounts & temporary guest sessions  Users either have their own account at brokerize or create an ephemeral anonymous account while they use it. In the latter case, all data is deleted automatically when the session is ended. If users decide to create a proper account, they can log in to brokerize any time with their credentials and keep their data stored as long as they wish.  # connecting brokers and synchronizing data to brokerize  The general approach is that users connect their brokerage accounts from either the official brokerize UI or from an app\'s interface using their broker credentials. To find out which brokers can be used for logging in, the [GetBrokers](#operation/GetBrokers) endpoint must be used. For example, an end user can add a Consorsbank login by calling [AddSession](#operation/AddSession). Note that brokerize *never* saves the login credentials, but only tokens / session ids that are issued by the brokers. Those are discarded as soon as the user logs out from the broker using [LogoutSession](#operation/LogoutSession).  As soon as users have connected one or more broker sessions, those sessions are synced into their user account. This means that the list of portfolios, positions and orders are stored in the brokerize database. All synchronized portfolios and their data are accessible using the portfolio operations (e.g. [GetPortfolios](#operation/GetPortfolios)). Even after the user disconnects a session (or it times out at the broker etc.), the data remains available via the API until deleted by the user ([DeletePortfolio](#operation/DeletePortfolio)). This means that users can easily look at the last known state of each portfolio without needing to log in. As soon as they log in again via [AddSession](#operation/AddSession), the data is updated again (i.e. the synchronized portfolio gets connected to an \"online session\" again).  Data is automatically synchronized in the background, but clients can also request a sync using [TriggerSessionSync](#operation/TriggerSessionSync).   # performing actions in portfolios Actions can be performed in portfolios that have online sessions. Using [GetAuthInfo](#operation/GetAuthInfo), different methods for authorising an action can be figured out. For example, some brokers support mTAN, where an SMS is sent for a specific use-case (e.g. a set of parameters for order creation). Other brokers allow authorizing actions with their mobile apps. Brokerizes unifies that information in `AuthInfo`. Usually, an action requires creation of a challenge (for mTAN that would be when the broker sends an SMS with a code) and later the actual action with a response for that challenge. The following actions are implemented:  - Session TAN handling (for performing other actions in portfolios without further per-case authorization)     - [CreateSessionTanChallenge](#operation/CreateSessionTanChallenge)     - [EnableSessionTan](#operation/EnableSessionTan)     - [EndSessionTan](#operation/EndSessionTan) - Create a trade     - [PrepareTrade](#operation/PrepareTrade) to figure out how a given security can be traded in a portfolio     - [CreateTradeChallenge](#operation/CreateTradeChallenge) to (for example) request a TAN for a trade     - [CreateTrade](#operation/CreateTrade) to perform the trade. - Edit an order (e.g. cancel or change specific fields)     - *not implemented yet*  # rate limits Currently a rate limit of 100 requests per 10 seconds per client/userId combination is implemented for all endpoints. Clients should implement ways to deal with the http `429` status code and can inspect the `Retry-After` header to implement appropriate waiting behavior.
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Challenge,
    ChallengeFromJSON,
    ChallengeToJSON,
    CreateOrderChallengeParams,
    CreateOrderChallengeParamsFromJSON,
    CreateOrderChallengeParamsToJSON,
    CreateOrderParams,
    CreateOrderParamsFromJSON,
    CreateOrderParamsToJSON,
    GetCostEstimationParams,
    GetCostEstimationParamsFromJSON,
    GetCostEstimationParamsToJSON,
    GetQuoteParams,
    GetQuoteParamsFromJSON,
    GetQuoteParamsToJSON,
    GetQuoteResult,
    GetQuoteResultFromJSON,
    GetQuoteResultToJSON,
    InlineResponse20012,
    InlineResponse20012FromJSON,
    InlineResponse20012ToJSON,
    InlineResponse20013,
    InlineResponse20013FromJSON,
    InlineResponse20013ToJSON,
    MustAcceptHint,
    MustAcceptHintFromJSON,
    MustAcceptHintToJSON,
    NoSessionAvailableForPortfolio,
    NoSessionAvailableForPortfolioFromJSON,
    NoSessionAvailableForPortfolioToJSON,
    OrderCostEstimation,
    OrderCostEstimationFromJSON,
    OrderCostEstimationToJSON,
    SecurityNotAvailableForTrading,
    SecurityNotAvailableForTradingFromJSON,
    SecurityNotAvailableForTradingToJSON,
} from '../models';

export interface CreateTradeRequest {
    createOrderParams: CreateOrderParams;
}

export interface CreateTradeChallengeRequest {
    createOrderChallengeParams: CreateOrderChallengeParams;
}

export interface GetCostEstimationRequest {
    getCostEstimationParams: GetCostEstimationParams;
}

export interface GetQuoteRequest {
    portfolioId: string;
    getQuoteParams: GetQuoteParams;
}

export interface PrepareTradeRequest {
    isin: string;
    portfolioId: string;
}

/**
 * 
 */
export class TradeApi extends runtime.BaseAPI {

    /**
     * Create a trade.  It is possible that the broker rejects the order because of some extra hints that the user must accept (which can not be figured out in `prepareTrade`, e.g. because the order volume has to be determined first). In thise case, the `MUST_ACCEPT_HINT` error code is returned. The user can choose to accept that hint. If that is the case, the request can be retried with the `acceptHintId` parameter.
     */
    async createTradeRaw(requestParameters: CreateTradeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse20013>> {
        if (requestParameters.createOrderParams === null || requestParameters.createOrderParams === undefined) {
            throw new runtime.RequiredError('createOrderParams','Required parameter requestParameters.createOrderParams was null or undefined when calling createTrade.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/trade/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrderParamsToJSON(requestParameters.createOrderParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20013FromJSON(jsonValue));
    }

    /**
     * Create a trade.  It is possible that the broker rejects the order because of some extra hints that the user must accept (which can not be figured out in `prepareTrade`, e.g. because the order volume has to be determined first). In thise case, the `MUST_ACCEPT_HINT` error code is returned. The user can choose to accept that hint. If that is the case, the request can be retried with the `acceptHintId` parameter.
     */
    async createTrade(requestParameters: CreateTradeRequest, initOverrides?: RequestInit): Promise<InlineResponse20013> {
        const response = await this.createTradeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a challenge
     */
    async createTradeChallengeRaw(requestParameters: CreateTradeChallengeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Challenge>> {
        if (requestParameters.createOrderChallengeParams === null || requestParameters.createOrderChallengeParams === undefined) {
            throw new runtime.RequiredError('createOrderChallengeParams','Required parameter requestParameters.createOrderChallengeParams was null or undefined when calling createTradeChallenge.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/trade/challenge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrderChallengeParamsToJSON(requestParameters.createOrderChallengeParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeFromJSON(jsonValue));
    }

    /**
     * Create a challenge
     */
    async createTradeChallenge(requestParameters: CreateTradeChallengeRequest, initOverrides?: RequestInit): Promise<Challenge> {
        const response = await this.createTradeChallengeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCostEstimationRaw(requestParameters: GetCostEstimationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OrderCostEstimation>> {
        if (requestParameters.getCostEstimationParams === null || requestParameters.getCostEstimationParams === undefined) {
            throw new runtime.RequiredError('getCostEstimationParams','Required parameter requestParameters.getCostEstimationParams was null or undefined when calling getCostEstimation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/trade/costEstimation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCostEstimationParamsToJSON(requestParameters.getCostEstimationParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderCostEstimationFromJSON(jsonValue));
    }

    /**
     */
    async getCostEstimation(requestParameters: GetCostEstimationRequest, initOverrides?: RequestInit): Promise<OrderCostEstimation> {
        const response = await this.getCostEstimationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a quote to use with `orderModel=quote`. The actual quote trade is then performed using `createTradeChallenge` / `createTrade` as for other orderModels.
     */
    async getQuoteRaw(requestParameters: GetQuoteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetQuoteResult>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling getQuote.');
        }

        if (requestParameters.getQuoteParams === null || requestParameters.getQuoteParams === undefined) {
            throw new runtime.RequiredError('getQuoteParams','Required parameter requestParameters.getQuoteParams was null or undefined when calling getQuote.');
        }

        const queryParameters: any = {};

        if (requestParameters.portfolioId !== undefined) {
            queryParameters['portfolioId'] = requestParameters.portfolioId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/trade/quote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetQuoteParamsToJSON(requestParameters.getQuoteParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetQuoteResultFromJSON(jsonValue));
    }

    /**
     * Get a quote to use with `orderModel=quote`. The actual quote trade is then performed using `createTradeChallenge` / `createTrade` as for other orderModels.
     */
    async getQuote(requestParameters: GetQuoteRequest, initOverrides?: RequestInit): Promise<GetQuoteResult> {
        const response = await this.getQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prepare a trade of `isin` in the given portfolio `portfolioId`. This describes what kind of orders are supported by the broker for the security. This requires the portfolio to have at least one active broker session.
     */
    async prepareTradeRaw(requestParameters: PrepareTradeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse20012>> {
        if (requestParameters.isin === null || requestParameters.isin === undefined) {
            throw new runtime.RequiredError('isin','Required parameter requestParameters.isin was null or undefined when calling prepareTrade.');
        }

        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling prepareTrade.');
        }

        const queryParameters: any = {};

        if (requestParameters.isin !== undefined) {
            queryParameters['isin'] = requestParameters.isin;
        }

        if (requestParameters.portfolioId !== undefined) {
            queryParameters['portfolioId'] = requestParameters.portfolioId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/trade/prepare`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20012FromJSON(jsonValue));
    }

    /**
     * Prepare a trade of `isin` in the given portfolio `portfolioId`. This describes what kind of orders are supported by the broker for the security. This requires the portfolio to have at least one active broker session.
     */
    async prepareTrade(requestParameters: PrepareTradeRequest, initOverrides?: RequestInit): Promise<InlineResponse20012> {
        const response = await this.prepareTradeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
