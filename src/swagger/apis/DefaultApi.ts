/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage easily with a unified interface.  # user accounts & temporary guest sessions  Users either have their own account at brokerize or create an ephemeral anonymous account while they use it. In the latter case, all data is deleted automatically when the session is ended. If users decide to create a proper account, they can log in to brokerize any time with their credentials and keep their data stored as long as they wish.  # connecting brokers and synchronizing data to brokerize  The general approach is that users connect their brokerage accounts from either the official brokerize UI or from an app\'s interface using their broker credentials. To find out which brokers can be used for logging in, the [GetBrokers](#operation/GetBrokers) endpoint must be used. For example, an end user can add a Consorsbank login by calling [AddSession](#operation/AddSession). Note that brokerize *never* saves the login credentials, but only tokens / session ids that are issued by the brokers. Those are discarded as soon as the user logs out from the broker using [LogoutSession](#operation/LogoutSession).  As soon as users have connected one or more broker sessions, those sessions are synced into their user account. This means that the list of portfolios, positions and orders are stored in the brokerize database. All synchronized portfolios and their data are accessible using the portfolio operations (e.g. [GetPortfolios](#operation/GetPortfolios)). Even after the user disconnects a session (or it times out at the broker etc.), the data remains available via the API until deleted by the user ([DeletePortfolio](#operation/DeletePortfolio)). This means that users can easily look at the last known state of each portfolio without needing to log in. As soon as they log in again via [AddSession](#operation/AddSession), the data is updated again (i.e. the synchronized portfolio gets connected to an \"online session\" again).  Data is automatically synchronized in the background, but clients can also request a sync using [TriggerSessionSync](#operation/TriggerSessionSync).   # performing actions in portfolios Actions can be performed in portfolios that have online sessions. Using [GetAuthInfo](#operation/GetAuthInfo), different methods for authorising an action can be figured out. For example, some brokers support mTAN, where an SMS is sent for a specific use-case (e.g. a set of parameters for order creation). Other brokers allow authorizing actions with their mobile apps. Brokerizes unifies that information in `AuthInfo`. Usually, an action requires creation of a challenge (for mTAN that would be when the broker sends an SMS with a code) and later the actual action with a response for that challenge. The following actions are implemented:  - Session TAN handling (for performing other actions in portfolios without further per-case authorization)     - [CreateSessionTanChallenge](#operation/CreateSessionTanChallenge)     - [EnableSessionTan](#operation/EnableSessionTan)     - [EndSessionTan](#operation/EndSessionTan) - Create a trade     - [PrepareTrade](#operation/PrepareTrade) to figure out how a given security can be traded in a portfolio     - [CreateTradeChallenge](#operation/CreateTradeChallenge) to (for example) request a TAN for a trade     - [CreateTrade](#operation/CreateTrade) to perform the trade. - Edit an order (e.g. cancel or change specific fields)     - *not implemented yet*  # rate limits Currently a rate limit of 100 requests per 10 seconds per client/userId combination is implemented for all endpoints. Clients should implement ways to deal with the http `429` status code and can inspect the `Retry-After` header to implement appropriate waiting behavior.
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddSessionCompleteChallengeParams,
    AddSessionCompleteChallengeParamsFromJSON,
    AddSessionCompleteChallengeParamsToJSON,
    AddSessionParams,
    AddSessionParamsFromJSON,
    AddSessionParamsToJSON,
    CancelOrderChallengeParams,
    CancelOrderChallengeParamsFromJSON,
    CancelOrderChallengeParamsToJSON,
    CancelOrderParams,
    CancelOrderParamsFromJSON,
    CancelOrderParamsToJSON,
    Challenge,
    ChallengeFromJSON,
    ChallengeToJSON,
    ChangeOrderChallengeParams,
    ChangeOrderChallengeParamsFromJSON,
    ChangeOrderChallengeParamsToJSON,
    ChangeOrderParams,
    ChangeOrderParamsFromJSON,
    ChangeOrderParamsToJSON,
    ConfirmOAuthParams,
    ConfirmOAuthParamsFromJSON,
    ConfirmOAuthParamsToJSON,
    CreateTanChallengeParams,
    CreateTanChallengeParamsFromJSON,
    CreateTanChallengeParamsToJSON,
    DecoupledOperationState,
    DecoupledOperationStateFromJSON,
    DecoupledOperationStateToJSON,
    EnableSessionTanParams,
    EnableSessionTanParamsFromJSON,
    EnableSessionTanParamsToJSON,
    EnableSessionTanResponse,
    EnableSessionTanResponseFromJSON,
    EnableSessionTanResponseToJSON,
    EndSessionTanResult,
    EndSessionTanResultFromJSON,
    EndSessionTanResultToJSON,
    EstimateChangeOrderCostsParams,
    EstimateChangeOrderCostsParamsFromJSON,
    EstimateChangeOrderCostsParamsToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse20010,
    InlineResponse20010FromJSON,
    InlineResponse20010ToJSON,
    InlineResponse20011,
    InlineResponse20011FromJSON,
    InlineResponse20011ToJSON,
    InlineResponse20014,
    InlineResponse20014FromJSON,
    InlineResponse20014ToJSON,
    InlineResponse20015,
    InlineResponse20015FromJSON,
    InlineResponse20015ToJSON,
    InlineResponse2003,
    InlineResponse2003FromJSON,
    InlineResponse2003ToJSON,
    InlineResponse2004,
    InlineResponse2004FromJSON,
    InlineResponse2004ToJSON,
    InlineResponse2005,
    InlineResponse2005FromJSON,
    InlineResponse2005ToJSON,
    InlineResponse2006,
    InlineResponse2006FromJSON,
    InlineResponse2006ToJSON,
    InlineResponse2007,
    InlineResponse2007FromJSON,
    InlineResponse2007ToJSON,
    InlineResponse2008,
    InlineResponse2008FromJSON,
    InlineResponse2008ToJSON,
    InlineResponse2009,
    InlineResponse2009FromJSON,
    InlineResponse2009ToJSON,
    LoginResultPublic,
    LoginResultPublicFromJSON,
    LoginResultPublicToJSON,
    LoginResultReadyPublic,
    LoginResultReadyPublicFromJSON,
    LoginResultReadyPublicToJSON,
    OrderCostEstimation,
    OrderCostEstimationFromJSON,
    OrderCostEstimationToJSON,
    PortfoliosResponse,
    PortfoliosResponseFromJSON,
    PortfoliosResponseToJSON,
    PrepareOAuthRedirectParams,
    PrepareOAuthRedirectParamsFromJSON,
    PrepareOAuthRedirectParamsToJSON,
    SessionResponse,
    SessionResponseFromJSON,
    SessionResponseToJSON,
} from '../models';

export interface AddSessionRequest {
    addSessionParams: AddSessionParams;
}

export interface AddSessionCompleteChallengeRequest {
    addSessionCompleteChallengeParams: AddSessionCompleteChallengeParams;
}

export interface CancelDecoupledOperationRequest {
    sessionId: string;
    decoupledOperationId: string;
}

export interface CancelOrderRequest {
    id: string;
    cancelOrderParams: CancelOrderParams;
}

export interface ChangeOrderRequest {
    id: string;
    changeOrderParams: ChangeOrderParams;
}

export interface ConfirmOAuthRequest {
    confirmOAuthParams: ConfirmOAuthParams;
}

export interface CreateCancelOrderChallengeRequest {
    id: string;
    cancelOrderChallengeParams: CancelOrderChallengeParams;
}

export interface CreateChangeOrderChallengeRequest {
    id: string;
    changeOrderChallengeParams: ChangeOrderChallengeParams;
}

export interface CreateSessionTanChallengeRequest {
    sessionId: string;
    createTanChallengeParams: CreateTanChallengeParams;
}

export interface DeletePortfolioRequest {
    portfolioId: string;
}

export interface EnableSessionTanRequest {
    sessionId: string;
    enableSessionTanParams: EnableSessionTanParams;
}

export interface EndSessionTanRequest {
    sessionId: string;
}

export interface GetAuthInfoRequest {
    portfolioId: string;
}

export interface GetChangeOrderCostEstimationRequest {
    id: string;
    estimateChangeOrderCostsParams: EstimateChangeOrderCostsParams;
}

export interface GetDecoupledOperationStatusRequest {
    sessionId: string;
    decoupledOperationId: string;
}

export interface GetOrderRequest {
    id: string;
}

export interface GetPortfolioOrdersRequest {
    portfolioId: string;
    take?: number;
    skip?: number;
    isin?: string;
    statuses?: string;
    orderBy?: string;
}

export interface GetPortfolioPositionsRequest {
    portfolioId: string;
}

export interface GetPortfolioQuotesRequest {
    portfolioId: string;
}

export interface LogoutSessionRequest {
    sessionId: string;
}

export interface PrepareOAuthRedirectRequest {
    prepareOAuthRedirectParams: PrepareOAuthRedirectParams;
}

export interface TriggerSessionSyncRequest {
    sessionId: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async addSessionRaw(requestParameters: AddSessionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LoginResultPublic>> {
        if (requestParameters.addSessionParams === null || requestParameters.addSessionParams === undefined) {
            throw new runtime.RequiredError('addSessionParams','Required parameter requestParameters.addSessionParams was null or undefined when calling addSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddSessionParamsToJSON(requestParameters.addSessionParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResultPublicFromJSON(jsonValue));
    }

    /**
     */
    async addSession(requestParameters: AddSessionRequest, initOverrides?: RequestInit): Promise<LoginResultPublic> {
        const response = await this.addSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If login returns the state `challenge`, the login must be completed by providing a challenge response first.
     */
    async addSessionCompleteChallengeRaw(requestParameters: AddSessionCompleteChallengeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LoginResultReadyPublic>> {
        if (requestParameters.addSessionCompleteChallengeParams === null || requestParameters.addSessionCompleteChallengeParams === undefined) {
            throw new runtime.RequiredError('addSessionCompleteChallengeParams','Required parameter requestParameters.addSessionCompleteChallengeParams was null or undefined when calling addSessionCompleteChallenge.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/sessions/completeLogin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddSessionCompleteChallengeParamsToJSON(requestParameters.addSessionCompleteChallengeParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResultReadyPublicFromJSON(jsonValue));
    }

    /**
     * If login returns the state `challenge`, the login must be completed by providing a challenge response first.
     */
    async addSessionCompleteChallenge(requestParameters: AddSessionCompleteChallengeRequest, initOverrides?: RequestInit): Promise<LoginResultReadyPublic> {
        const response = await this.addSessionCompleteChallengeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async cancelDecoupledOperationRaw(requestParameters: CancelDecoupledOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling cancelDecoupledOperation.');
        }

        if (requestParameters.decoupledOperationId === null || requestParameters.decoupledOperationId === undefined) {
            throw new runtime.RequiredError('decoupledOperationId','Required parameter requestParameters.decoupledOperationId was null or undefined when calling cancelDecoupledOperation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/sessions/{sessionId}/decoupledOperation/{decoupledOperationId}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"decoupledOperationId"}}`, encodeURIComponent(String(requestParameters.decoupledOperationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cancelDecoupledOperation(requestParameters: CancelDecoupledOperationRequest, initOverrides?: RequestInit): Promise<void> {
        await this.cancelDecoupledOperationRaw(requestParameters, initOverrides);
    }

    /**
     * Actually cancel the order
     */
    async cancelOrderRaw(requestParameters: CancelOrderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancelOrder.');
        }

        if (requestParameters.cancelOrderParams === null || requestParameters.cancelOrderParams === undefined) {
            throw new runtime.RequiredError('cancelOrderParams','Required parameter requestParameters.cancelOrderParams was null or undefined when calling cancelOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/order/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelOrderParamsToJSON(requestParameters.cancelOrderParams),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Actually cancel the order
     */
    async cancelOrder(requestParameters: CancelOrderRequest, initOverrides?: RequestInit): Promise<void> {
        await this.cancelOrderRaw(requestParameters, initOverrides);
    }

    /**
     * Actually change the order
     */
    async changeOrderRaw(requestParameters: ChangeOrderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling changeOrder.');
        }

        if (requestParameters.changeOrderParams === null || requestParameters.changeOrderParams === undefined) {
            throw new runtime.RequiredError('changeOrderParams','Required parameter requestParameters.changeOrderParams was null or undefined when calling changeOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/order/{id}/change`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeOrderParamsToJSON(requestParameters.changeOrderParams),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Actually change the order
     */
    async changeOrder(requestParameters: ChangeOrderRequest, initOverrides?: RequestInit): Promise<void> {
        await this.changeOrderRaw(requestParameters, initOverrides);
    }

    /**
     * For brokers with OAuth login processes, this adds the session to the user\'s account after redirects happen. Only the user that is redirected from the broker login in the browser will receive the `code`. Therforce this step ensures that the logged-in user at brokerize is the one that has gone through the broker OAuth steps.
     */
    async confirmOAuthRaw(requestParameters: ConfirmOAuthRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse20011>> {
        if (requestParameters.confirmOAuthParams === null || requestParameters.confirmOAuthParams === undefined) {
            throw new runtime.RequiredError('confirmOAuthParams','Required parameter requestParameters.confirmOAuthParams was null or undefined when calling confirmOAuth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/sessions/confirmOAuth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmOAuthParamsToJSON(requestParameters.confirmOAuthParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20011FromJSON(jsonValue));
    }

    /**
     * For brokers with OAuth login processes, this adds the session to the user\'s account after redirects happen. Only the user that is redirected from the broker login in the browser will receive the `code`. Therforce this step ensures that the logged-in user at brokerize is the one that has gone through the broker OAuth steps.
     */
    async confirmOAuth(requestParameters: ConfirmOAuthRequest, initOverrides?: RequestInit): Promise<InlineResponse20011> {
        const response = await this.confirmOAuthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a cancel order challenge
     */
    async createCancelOrderChallengeRaw(requestParameters: CreateCancelOrderChallengeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Challenge>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createCancelOrderChallenge.');
        }

        if (requestParameters.cancelOrderChallengeParams === null || requestParameters.cancelOrderChallengeParams === undefined) {
            throw new runtime.RequiredError('cancelOrderChallengeParams','Required parameter requestParameters.cancelOrderChallengeParams was null or undefined when calling createCancelOrderChallenge.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/order/{id}/cancelChallenge`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelOrderChallengeParamsToJSON(requestParameters.cancelOrderChallengeParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeFromJSON(jsonValue));
    }

    /**
     * Create a cancel order challenge
     */
    async createCancelOrderChallenge(requestParameters: CreateCancelOrderChallengeRequest, initOverrides?: RequestInit): Promise<Challenge> {
        const response = await this.createCancelOrderChallengeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a change order challenge
     */
    async createChangeOrderChallengeRaw(requestParameters: CreateChangeOrderChallengeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Challenge>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createChangeOrderChallenge.');
        }

        if (requestParameters.changeOrderChallengeParams === null || requestParameters.changeOrderChallengeParams === undefined) {
            throw new runtime.RequiredError('changeOrderChallengeParams','Required parameter requestParameters.changeOrderChallengeParams was null or undefined when calling createChangeOrderChallenge.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/order/{id}/changeChallenge`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeOrderChallengeParamsToJSON(requestParameters.changeOrderChallengeParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeFromJSON(jsonValue));
    }

    /**
     * Create a change order challenge
     */
    async createChangeOrderChallenge(requestParameters: CreateChangeOrderChallengeRequest, initOverrides?: RequestInit): Promise<Challenge> {
        const response = await this.createChangeOrderChallengeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a guest user and return an JWT token which can be used to access resources. The user as well as the token have a lifetime of 24 hours.
     */
    async createGuestUserRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse20015>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/guest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20015FromJSON(jsonValue));
    }

    /**
     * Create a guest user and return an JWT token which can be used to access resources. The user as well as the token have a lifetime of 24 hours.
     */
    async createGuestUser(initOverrides?: RequestInit): Promise<InlineResponse20015> {
        const response = await this.createGuestUserRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async createSessionTanChallengeRaw(requestParameters: CreateSessionTanChallengeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Challenge>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling createSessionTanChallenge.');
        }

        if (requestParameters.createTanChallengeParams === null || requestParameters.createTanChallengeParams === undefined) {
            throw new runtime.RequiredError('createTanChallengeParams','Required parameter requestParameters.createTanChallengeParams was null or undefined when calling createSessionTanChallenge.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/sessions/{sessionId}/sessiontanchallenge`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTanChallengeParamsToJSON(requestParameters.createTanChallengeParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeFromJSON(jsonValue));
    }

    /**
     */
    async createSessionTanChallenge(requestParameters: CreateSessionTanChallengeRequest, initOverrides?: RequestInit): Promise<Challenge> {
        const response = await this.createSessionTanChallengeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePortfolioRaw(requestParameters: DeletePortfolioRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2003>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling deletePortfolio.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/portfolios/{portfolioId}`.replace(`{${"portfolioId"}}`, encodeURIComponent(String(requestParameters.portfolioId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     */
    async deletePortfolio(requestParameters: DeletePortfolioRequest, initOverrides?: RequestInit): Promise<InlineResponse2003> {
        const response = await this.deletePortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async enableSessionTanRaw(requestParameters: EnableSessionTanRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EnableSessionTanResponse>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling enableSessionTan.');
        }

        if (requestParameters.enableSessionTanParams === null || requestParameters.enableSessionTanParams === undefined) {
            throw new runtime.RequiredError('enableSessionTanParams','Required parameter requestParameters.enableSessionTanParams was null or undefined when calling enableSessionTan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/sessions/{sessionId}/sessiontan`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnableSessionTanParamsToJSON(requestParameters.enableSessionTanParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnableSessionTanResponseFromJSON(jsonValue));
    }

    /**
     */
    async enableSessionTan(requestParameters: EnableSessionTanRequest, initOverrides?: RequestInit): Promise<EnableSessionTanResponse> {
        const response = await this.enableSessionTanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * End Session TAN for the given broker session.  If applicable, the broker may return a message with a confirmation code which can be looked up in the initial activation SMS. If message is present in the response, it should be displayed to the user.
     */
    async endSessionTanRaw(requestParameters: EndSessionTanRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EndSessionTanResult>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling endSessionTan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/sessions/{sessionId}/sessiontan`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EndSessionTanResultFromJSON(jsonValue));
    }

    /**
     * End Session TAN for the given broker session.  If applicable, the broker may return a message with a confirmation code which can be looked up in the initial activation SMS. If message is present in the response, it should be displayed to the user.
     */
    async endSessionTan(requestParameters: EndSessionTanRequest, initOverrides?: RequestInit): Promise<EndSessionTanResult> {
        const response = await this.endSessionTanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAuthInfoRaw(requestParameters: GetAuthInfoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2009>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling getAuthInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/portfolios/{portfolioId}/authinfo`.replace(`{${"portfolioId"}}`, encodeURIComponent(String(requestParameters.portfolioId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2009FromJSON(jsonValue));
    }

    /**
     */
    async getAuthInfo(requestParameters: GetAuthInfoRequest, initOverrides?: RequestInit): Promise<InlineResponse2009> {
        const response = await this.getAuthInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all brokers that users can log in to. Describes *how* to login by specifying either a `loginForm` or some other means of login (e.g. the brokers\' OAuth process in the future).
     */
    async getBrokersRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/brokers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * List all brokers that users can log in to. Describes *how* to login by specifying either a `loginForm` or some other means of login (e.g. the brokers\' OAuth process in the future).
     */
    async getBrokers(initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.getBrokersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get an order cost estimation for an order update.
     */
    async getChangeOrderCostEstimationRaw(requestParameters: GetChangeOrderCostEstimationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OrderCostEstimation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChangeOrderCostEstimation.');
        }

        if (requestParameters.estimateChangeOrderCostsParams === null || requestParameters.estimateChangeOrderCostsParams === undefined) {
            throw new runtime.RequiredError('estimateChangeOrderCostsParams','Required parameter requestParameters.estimateChangeOrderCostsParams was null or undefined when calling getChangeOrderCostEstimation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/order/{id}/changeCostEstimation`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EstimateChangeOrderCostsParamsToJSON(requestParameters.estimateChangeOrderCostsParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderCostEstimationFromJSON(jsonValue));
    }

    /**
     * Get an order cost estimation for an order update.
     */
    async getChangeOrderCostEstimation(requestParameters: GetChangeOrderCostEstimationRequest, initOverrides?: RequestInit): Promise<OrderCostEstimation> {
        const response = await this.getChangeOrderCostEstimationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDecoupledOperationStatusRaw(requestParameters: GetDecoupledOperationStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DecoupledOperationState>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling getDecoupledOperationStatus.');
        }

        if (requestParameters.decoupledOperationId === null || requestParameters.decoupledOperationId === undefined) {
            throw new runtime.RequiredError('decoupledOperationId','Required parameter requestParameters.decoupledOperationId was null or undefined when calling getDecoupledOperationStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/sessions/{sessionId}/decoupledOperation/{decoupledOperationId}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))).replace(`{${"decoupledOperationId"}}`, encodeURIComponent(String(requestParameters.decoupledOperationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DecoupledOperationStateFromJSON(jsonValue));
    }

    /**
     */
    async getDecoupledOperationStatus(requestParameters: GetDecoupledOperationStatusRequest, initOverrides?: RequestInit): Promise<DecoupledOperationState> {
        const response = await this.getDecoupledOperationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all exchanges mapped in brokerize.  Brokers provide their own list of exchanges with any order preparation request, so there may be cases where a broker exchange is not mapped to this brokerize exchange list. This is totally valid: this list serves as a known subset of exchanges to facilitate switching between brokers or mapping to your own exchange database.
     */
    async getExchangesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2004>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/exchanges`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * List all exchanges mapped in brokerize.  Brokers provide their own list of exchanges with any order preparation request, so there may be cases where a broker exchange is not mapped to this brokerize exchange list. This is totally valid: this list serves as a known subset of exchanges to facilitate switching between brokers or mapping to your own exchange database.
     */
    async getExchanges(initOverrides?: RequestInit): Promise<InlineResponse2004> {
        const response = await this.getExchangesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getOrderRaw(requestParameters: GetOrderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2005>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/order/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2005FromJSON(jsonValue));
    }

    /**
     */
    async getOrder(requestParameters: GetOrderRequest, initOverrides?: RequestInit): Promise<InlineResponse2005> {
        const response = await this.getOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPortfolioOrdersRaw(requestParameters: GetPortfolioOrdersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2008>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling getPortfolioOrders.');
        }

        const queryParameters: any = {};

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.isin !== undefined) {
            queryParameters['isin'] = requestParameters.isin;
        }

        if (requestParameters.statuses !== undefined) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/portfolios/{portfolioId}/orders`.replace(`{${"portfolioId"}}`, encodeURIComponent(String(requestParameters.portfolioId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2008FromJSON(jsonValue));
    }

    /**
     */
    async getPortfolioOrders(requestParameters: GetPortfolioOrdersRequest, initOverrides?: RequestInit): Promise<InlineResponse2008> {
        const response = await this.getPortfolioOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPortfolioPositionsRaw(requestParameters: GetPortfolioPositionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2007>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling getPortfolioPositions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/portfolios/{portfolioId}/positions`.replace(`{${"portfolioId"}}`, encodeURIComponent(String(requestParameters.portfolioId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2007FromJSON(jsonValue));
    }

    /**
     */
    async getPortfolioPositions(requestParameters: GetPortfolioPositionsRequest, initOverrides?: RequestInit): Promise<InlineResponse2007> {
        const response = await this.getPortfolioPositionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPortfolioQuotesRaw(requestParameters: GetPortfolioQuotesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2006>> {
        if (requestParameters.portfolioId === null || requestParameters.portfolioId === undefined) {
            throw new runtime.RequiredError('portfolioId','Required parameter requestParameters.portfolioId was null or undefined when calling getPortfolioQuotes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/portfolios/{portfolioId}/quotes`.replace(`{${"portfolioId"}}`, encodeURIComponent(String(requestParameters.portfolioId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2006FromJSON(jsonValue));
    }

    /**
     */
    async getPortfolioQuotes(requestParameters: GetPortfolioQuotesRequest, initOverrides?: RequestInit): Promise<InlineResponse2006> {
        const response = await this.getPortfolioQuotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPortfoliosRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<PortfoliosResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/portfolios`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfoliosResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPortfolios(initOverrides?: RequestInit): Promise<PortfoliosResponse> {
        const response = await this.getPortfoliosRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the currently active broker sessions of the user\'s account.
     */
    async getSessionsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<SessionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionResponseFromJSON(jsonValue));
    }

    /**
     * Get the currently active broker sessions of the user\'s account.
     */
    async getSessions(initOverrides?: RequestInit): Promise<SessionResponse> {
        const response = await this.getSessionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Checks the provided authentication and returns the logged-in user.
     */
    async getUserRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse20014>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20014FromJSON(jsonValue));
    }

    /**
     * Checks the provided authentication and returns the logged-in user.
     */
    async getUser(initOverrides?: RequestInit): Promise<InlineResponse20014> {
        const response = await this.getUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Log out from the given broker session.
     */
    async logoutSessionRaw(requestParameters: LogoutSessionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2003>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling logoutSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/sessions/{sessionId}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     * Log out from the given broker session.
     */
    async logoutSession(requestParameters: LogoutSessionRequest, initOverrides?: RequestInit): Promise<InlineResponse2003> {
        const response = await this.logoutSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * For brokers with `isOAuth`, sessions can not be created using `AddSession`. This is how a session can be added for an OAuth-based login process:  1. use `prepareOAuthRedirect` to obtain a URL to redirect to. You can provide a `returnTo` URL which will be redirect to later. Note that a list of allowed URLs has to be configured for the client. 2. redirect the user\'s browser to the `redirectTo` URL 3. after the user has logged in at the broker\'s interface, a redirect to `returnTo` with the URL query parameters `verifysession=1`, `code` and `ticketId` will happen 4. the `returnTo` page must call `confirmOAuth` with the given `ticketId` and `code` to finally add the session to the user\'s account
     */
    async prepareOAuthRedirectRaw(requestParameters: PrepareOAuthRedirectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse20010>> {
        if (requestParameters.prepareOAuthRedirectParams === null || requestParameters.prepareOAuthRedirectParams === undefined) {
            throw new runtime.RequiredError('prepareOAuthRedirectParams','Required parameter requestParameters.prepareOAuthRedirectParams was null or undefined when calling prepareOAuthRedirect.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/sessions/prepareOAuthRedirect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PrepareOAuthRedirectParamsToJSON(requestParameters.prepareOAuthRedirectParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20010FromJSON(jsonValue));
    }

    /**
     * For brokers with `isOAuth`, sessions can not be created using `AddSession`. This is how a session can be added for an OAuth-based login process:  1. use `prepareOAuthRedirect` to obtain a URL to redirect to. You can provide a `returnTo` URL which will be redirect to later. Note that a list of allowed URLs has to be configured for the client. 2. redirect the user\'s browser to the `redirectTo` URL 3. after the user has logged in at the broker\'s interface, a redirect to `returnTo` with the URL query parameters `verifysession=1`, `code` and `ticketId` will happen 4. the `returnTo` page must call `confirmOAuth` with the given `ticketId` and `code` to finally add the session to the user\'s account
     */
    async prepareOAuthRedirect(requestParameters: PrepareOAuthRedirectRequest, initOverrides?: RequestInit): Promise<InlineResponse20010> {
        const response = await this.prepareOAuthRedirectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger a background sync process for the given broker session. This means that a sync will be scheduled as soon as possible. All data related to the portfolio (e.g. positions and orders) will be loaded into the brokerize database.
     */
    async triggerSessionSyncRaw(requestParameters: TriggerSessionSyncRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2003>> {
        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling triggerSessionSync.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/sessions/{sessionId}/sync`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     * Trigger a background sync process for the given broker session. This means that a sync will be scheduled as soon as possible. All data related to the portfolio (e.g. positions and orders) will be loaded into the brokerize database.
     */
    async triggerSessionSync(requestParameters: TriggerSessionSyncRequest, initOverrides?: RequestInit): Promise<InlineResponse2003> {
        const response = await this.triggerSessionSyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Most operations at brokerize have asynchronous effects.  For example, consider the flow of an order: when the user creates an order, it will not immediately appear in order list endpoints, because usually brokers take a few seconds until they are retrievable in those lists. Also, after a while, the order may be executed or cancelled asynchronously by the stock exchange.  A common solution for frontends would be to reload the order list regularly. However data is then either delayed or there will be many more requests than needed.  The brokerize websocket endpoint allows getting updates via web sockets. Generally speaking, clients can subscribe by assigning a subscription id and will then receive updates on that subscription.  In this documentation, ⬆️ denotes messages from the client to the server, whereas messages from server to client are marked with ⬇️.  ## authentication When using cookies for authorization, the WebSocket connection is authenticated with the HTTP upgrade request.  If token headers are used, the *first* message from client to server must be:  ``` ⬆️ {     \"cmd\": \"authorize\",     \"idToken\": <string> } ```  In all cases, clients must wait for the welcome message before sending other messages:   ``` ⬇️ { \"cmd\": \"authenticated\" } ```  ## ping After 1 minute of inactivity of a client, the WebSocket connection will be considered stale and will automatically terminated. To prevent this, a ping message can be sent:  ```  ⬆️ {\"cmd\": \"ping\"} ```  The server also sends this message regularly. If no message has been received on a WebSocket connection for more than 1 minute, it should be terminated by the client.  ```  ⬇️ {\"cmd\": \"ping\"} ```  ## subscriptions Subscriptions can be used to get invalidate events or updates for selected resources.   ### invalidate subscriptions Invalidation events can be used for the frontend to know when reload requests via the HTTP endpoints are appropriate. Currently only invalidate events can be subscribed, the actual data must then be reloaded using the HTTP endpoints.  To set up a subscription for an invalidate event, use:  ``` ⬆️ {     \"cmd\": \"subscribe\",     \"type\": \"invalidate\",     \"subscriptionId\": 1,     \"entity: \"brokersessions\" /_* \"positions\" | \"orders\" *_/,     \"portfolioId\": 42 /_* required for \"positions\" or \"orders\" *_/ } ```  If the subscription failed to be set up on the server, an error will be sent for the subscription. This also automatically ends the subscription on the server side:  ``` ⬇️ {     \"subscriptionId\": 1,     \"error\": {         \"message\": \"Could not set up invalidation event due to...\"     } } ```  If an invalid `subscriptionId` is provided (or the subscription id is already in use by the connection), an error like this will be sent: ``` ⬇️ {     \"error\": {         \"message\": \"Could not add subscription due to invalid subscriptionId\"     } } ``` ⚠️ *the connection will then be terminated immediately*.  If the subscription is sucessfuly set up, whenever an invalidation happens, the server will send a message like this:  ``` ⬇️ {     \"cmd\": \"invalidate\",     \"subscriptionId\": 1 } ```  When that invalidation event is received, the client should reload the data using the corresponding endpoints.  Clients can end their subscription with the `unsubscribe` command:  ``` ⬆️ {     \"cmd\": \"unsubscribe\",     \"subscriptionId\": 1 } ```  ### subscribe to the state of a decoupled operation For decoupled operations (e.g. authorizing a session TAN using a second factor device), the state of the operation can be subscribed:  ``` ⬆️ {     \"cmd\": \"subscribe\",     \"type\": \"decoupledOperationStatus\",     \"subscriptionId\": 1,     \"sessionId\": string,     \"decoupledOperationId\": string    } ```  Error handling as well as unsubscribing works as described for invalidate subscriptions. Example message from the server for updating the state:  ``` ⬇️ {     \"cmd\": \"updateDecoupledOperationStatus\",     \"subscriptionId\": number,     \"state\": <DecoupledOperationStatus> } ``` 
     */
    async websocketRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/websocket`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Most operations at brokerize have asynchronous effects.  For example, consider the flow of an order: when the user creates an order, it will not immediately appear in order list endpoints, because usually brokers take a few seconds until they are retrievable in those lists. Also, after a while, the order may be executed or cancelled asynchronously by the stock exchange.  A common solution for frontends would be to reload the order list regularly. However data is then either delayed or there will be many more requests than needed.  The brokerize websocket endpoint allows getting updates via web sockets. Generally speaking, clients can subscribe by assigning a subscription id and will then receive updates on that subscription.  In this documentation, ⬆️ denotes messages from the client to the server, whereas messages from server to client are marked with ⬇️.  ## authentication When using cookies for authorization, the WebSocket connection is authenticated with the HTTP upgrade request.  If token headers are used, the *first* message from client to server must be:  ``` ⬆️ {     \"cmd\": \"authorize\",     \"idToken\": <string> } ```  In all cases, clients must wait for the welcome message before sending other messages:   ``` ⬇️ { \"cmd\": \"authenticated\" } ```  ## ping After 1 minute of inactivity of a client, the WebSocket connection will be considered stale and will automatically terminated. To prevent this, a ping message can be sent:  ```  ⬆️ {\"cmd\": \"ping\"} ```  The server also sends this message regularly. If no message has been received on a WebSocket connection for more than 1 minute, it should be terminated by the client.  ```  ⬇️ {\"cmd\": \"ping\"} ```  ## subscriptions Subscriptions can be used to get invalidate events or updates for selected resources.   ### invalidate subscriptions Invalidation events can be used for the frontend to know when reload requests via the HTTP endpoints are appropriate. Currently only invalidate events can be subscribed, the actual data must then be reloaded using the HTTP endpoints.  To set up a subscription for an invalidate event, use:  ``` ⬆️ {     \"cmd\": \"subscribe\",     \"type\": \"invalidate\",     \"subscriptionId\": 1,     \"entity: \"brokersessions\" /_* \"positions\" | \"orders\" *_/,     \"portfolioId\": 42 /_* required for \"positions\" or \"orders\" *_/ } ```  If the subscription failed to be set up on the server, an error will be sent for the subscription. This also automatically ends the subscription on the server side:  ``` ⬇️ {     \"subscriptionId\": 1,     \"error\": {         \"message\": \"Could not set up invalidation event due to...\"     } } ```  If an invalid `subscriptionId` is provided (or the subscription id is already in use by the connection), an error like this will be sent: ``` ⬇️ {     \"error\": {         \"message\": \"Could not add subscription due to invalid subscriptionId\"     } } ``` ⚠️ *the connection will then be terminated immediately*.  If the subscription is sucessfuly set up, whenever an invalidation happens, the server will send a message like this:  ``` ⬇️ {     \"cmd\": \"invalidate\",     \"subscriptionId\": 1 } ```  When that invalidation event is received, the client should reload the data using the corresponding endpoints.  Clients can end their subscription with the `unsubscribe` command:  ``` ⬆️ {     \"cmd\": \"unsubscribe\",     \"subscriptionId\": 1 } ```  ### subscribe to the state of a decoupled operation For decoupled operations (e.g. authorizing a session TAN using a second factor device), the state of the operation can be subscribed:  ``` ⬆️ {     \"cmd\": \"subscribe\",     \"type\": \"decoupledOperationStatus\",     \"subscriptionId\": 1,     \"sessionId\": string,     \"decoupledOperationId\": string    } ```  Error handling as well as unsubscribing works as described for invalidate subscriptions. Example message from the server for updating the state:  ``` ⬇️ {     \"cmd\": \"updateDecoupledOperationStatus\",     \"subscriptionId\": number,     \"state\": <DecoupledOperationStatus> } ``` 
     */
    async websocket(initOverrides?: RequestInit): Promise<void> {
        await this.websocketRaw(initOverrides);
    }

}
