/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  ErrorResponse,
  ErrorResponseFromJSON,
  ErrorResponseToJSON,
  SecurityQuotesMeta,
  SecurityQuotesMetaFromJSON,
  SecurityQuotesMetaToJSON,
  SecurityQuotesResponse,
  SecurityQuotesResponseFromJSON,
  SecurityQuotesResponseToJSON,
} from "../models";

export interface GetSecurityQuotesRequest {
  securityQuotesToken: string;
}

export interface GetSecurityQuotesMetaRequest {
  securityQuotesToken: string;
}

/**
 *
 */
export class SecuritiesApi extends runtime.BaseAPI {
  /**
   * Load the current quotes for the given `securityQuotesToken` (provided in `PreparedTrade`).
   */
  async getSecurityQuotesRaw(
    requestParameters: GetSecurityQuotesRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<SecurityQuotesResponse>> {
    if (
      requestParameters.securityQuotesToken === null ||
      requestParameters.securityQuotesToken === undefined
    ) {
      throw new runtime.RequiredError(
        "securityQuotesToken",
        "Required parameter requestParameters.securityQuotesToken was null or undefined when calling getSecurityQuotes."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["x-brkrz-client-id"] =
        this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["x-access-token"] =
        this.configuration.apiKey("x-access-token"); // idToken authentication
    }

    const response = await this.request(
      {
        path: `/securities/quotes/{securityQuotesToken}`.replace(
          `{${"securityQuotesToken"}}`,
          encodeURIComponent(String(requestParameters.securityQuotesToken))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SecurityQuotesResponseFromJSON(jsonValue)
    );
  }

  /**
   * Load the current quotes for the given `securityQuotesToken` (provided in `PreparedTrade`).
   */
  async getSecurityQuotes(
    requestParameters: GetSecurityQuotesRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<SecurityQuotesResponse> {
    const response = await this.getSecurityQuotesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async getSecurityQuotesMetaRaw(
    requestParameters: GetSecurityQuotesMetaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<SecurityQuotesMeta>> {
    if (
      requestParameters.securityQuotesToken === null ||
      requestParameters.securityQuotesToken === undefined
    ) {
      throw new runtime.RequiredError(
        "securityQuotesToken",
        "Required parameter requestParameters.securityQuotesToken was null or undefined when calling getSecurityQuotesMeta."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["x-brkrz-client-id"] =
        this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["x-access-token"] =
        this.configuration.apiKey("x-access-token"); // idToken authentication
    }

    const response = await this.request(
      {
        path: `/securities/quotes/{securityQuotesToken}/meta`.replace(
          `{${"securityQuotesToken"}}`,
          encodeURIComponent(String(requestParameters.securityQuotesToken))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SecurityQuotesMetaFromJSON(jsonValue)
    );
  }

  /**
   */
  async getSecurityQuotesMeta(
    requestParameters: GetSecurityQuotesMetaRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<SecurityQuotesMeta> {
    const response = await this.getSecurityQuotesMetaRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
