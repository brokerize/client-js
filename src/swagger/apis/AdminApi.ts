/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddOAuthReturnToUrlRequest,
    AddOAuthReturnToUrlRequestFromJSON,
    AddOAuthReturnToUrlRequestToJSON,
    AddOriginRequest,
    AddOriginRequestFromJSON,
    AddOriginRequestToJSON,
    ClientsResponseInner,
    ClientsResponseInnerFromJSON,
    ClientsResponseInnerToJSON,
    CreateClient200Response,
    CreateClient200ResponseFromJSON,
    CreateClient200ResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SetClientConfigRequest,
    SetClientConfigRequestFromJSON,
    SetClientConfigRequestToJSON,
} from '../models';

export interface AddOAuthReturnToUrlOperationRequest {
    clientId: string;
    addOAuthReturnToUrlRequest: AddOAuthReturnToUrlRequest;
}

export interface AddOriginOperationRequest {
    clientId: string;
    addOriginRequest: AddOriginRequest;
}

export interface DeleteClientRequest {
    clientId: string;
}

export interface GetOrderReportRequest {
    from: string;
    to: string;
    clientIds?: string;
}

export interface RemoveOAuthReturnToUrlRequest {
    clientId: string;
    addOAuthReturnToUrlRequest: AddOAuthReturnToUrlRequest;
}

export interface RemoveOriginRequest {
    clientId: string;
    addOriginRequest: AddOriginRequest;
}

export interface SetClientConfigOperationRequest {
    clientId: string;
    setClientConfigRequest: SetClientConfigRequest;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Add an OAuth return to URL to the client config.
     */
    async addOAuthReturnToUrlRaw(requestParameters: AddOAuthReturnToUrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling addOAuthReturnToUrl.');
        }

        if (requestParameters.addOAuthReturnToUrlRequest === null || requestParameters.addOAuthReturnToUrlRequest === undefined) {
            throw new runtime.RequiredError('addOAuthReturnToUrlRequest','Required parameter requestParameters.addOAuthReturnToUrlRequest was null or undefined when calling addOAuthReturnToUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-brkrz-client-id"] = this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/admin/clients/{clientId}/oauthReturnTo`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOAuthReturnToUrlRequestToJSON(requestParameters.addOAuthReturnToUrlRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add an OAuth return to URL to the client config.
     */
    async addOAuthReturnToUrl(requestParameters: AddOAuthReturnToUrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.addOAuthReturnToUrlRaw(requestParameters, initOverrides);
    }

    /**
     * Add an allowed CORS origin to the client config.
     */
    async addOriginRaw(requestParameters: AddOriginOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling addOrigin.');
        }

        if (requestParameters.addOriginRequest === null || requestParameters.addOriginRequest === undefined) {
            throw new runtime.RequiredError('addOriginRequest','Required parameter requestParameters.addOriginRequest was null or undefined when calling addOrigin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-brkrz-client-id"] = this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/admin/clients/{clientId}/origin`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOriginRequestToJSON(requestParameters.addOriginRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add an allowed CORS origin to the client config.
     */
    async addOrigin(requestParameters: AddOriginOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.addOriginRaw(requestParameters, initOverrides);
    }

    /**
     * Create an API client.
     */
    async createClientRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateClient200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-brkrz-client-id"] = this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/admin/client`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateClient200ResponseFromJSON(jsonValue));
    }

    /**
     * Create an API client.
     */
    async createClient(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateClient200Response> {
        const response = await this.createClientRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete the given client permanently.
     */
    async deleteClientRaw(requestParameters: DeleteClientRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling deleteClient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-brkrz-client-id"] = this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/admin/client/{clientId}`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the given client permanently.
     */
    async deleteClient(requestParameters: DeleteClientRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.deleteClientRaw(requestParameters, initOverrides);
    }

    /**
     * List all clients that the current user may administrate.
     */
    async getMyClientsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<ClientsResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-brkrz-client-id"] = this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/admin/clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientsResponseInnerFromJSON));
    }

    /**
     * List all clients that the current user may administrate.
     */
    async getMyClients(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<ClientsResponseInner>> {
        const response = await this.getMyClientsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get an order report for a client.
     */
    async getOrderReportRaw(requestParameters: GetOrderReportRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getOrderReport.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getOrderReport.');
        }

        const queryParameters: any = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.clientIds !== undefined) {
            queryParameters['clientIds'] = requestParameters.clientIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-brkrz-client-id"] = this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/admin/orderReport`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get an order report for a client.
     */
    async getOrderReport(requestParameters: GetOrderReportRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string> {
        const response = await this.getOrderReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove an OAuth return to URL from the client config.
     */
    async removeOAuthReturnToUrlRaw(requestParameters: RemoveOAuthReturnToUrlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling removeOAuthReturnToUrl.');
        }

        if (requestParameters.addOAuthReturnToUrlRequest === null || requestParameters.addOAuthReturnToUrlRequest === undefined) {
            throw new runtime.RequiredError('addOAuthReturnToUrlRequest','Required parameter requestParameters.addOAuthReturnToUrlRequest was null or undefined when calling removeOAuthReturnToUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-brkrz-client-id"] = this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/admin/clients/{clientId}/oauthReturnTo`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AddOAuthReturnToUrlRequestToJSON(requestParameters.addOAuthReturnToUrlRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an OAuth return to URL from the client config.
     */
    async removeOAuthReturnToUrl(requestParameters: RemoveOAuthReturnToUrlRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.removeOAuthReturnToUrlRaw(requestParameters, initOverrides);
    }

    /**
     * Remove an allowed CORS origin from the client config.
     */
    async removeOriginRaw(requestParameters: RemoveOriginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling removeOrigin.');
        }

        if (requestParameters.addOriginRequest === null || requestParameters.addOriginRequest === undefined) {
            throw new runtime.RequiredError('addOriginRequest','Required parameter requestParameters.addOriginRequest was null or undefined when calling removeOrigin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-brkrz-client-id"] = this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/admin/clients/{clientId}/origin`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AddOriginRequestToJSON(requestParameters.addOriginRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an allowed CORS origin from the client config.
     */
    async removeOrigin(requestParameters: RemoveOriginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.removeOriginRaw(requestParameters, initOverrides);
    }

    /**
     * Replace the client configuration. Keys that are not provided will not be changed.
     */
    async setClientConfigRaw(requestParameters: SetClientConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling setClientConfig.');
        }

        if (requestParameters.setClientConfigRequest === null || requestParameters.setClientConfigRequest === undefined) {
            throw new runtime.RequiredError('setClientConfigRequest','Required parameter requestParameters.setClientConfigRequest was null or undefined when calling setClientConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-brkrz-client-id"] = this.configuration.apiKey("x-brkrz-client-id"); // clientId authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-access-token"] = this.configuration.apiKey("x-access-token"); // idToken authentication
        }

        const response = await this.request({
            path: `/admin/clients/{clientId}/config`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetClientConfigRequestToJSON(requestParameters.setClientConfigRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Replace the client configuration. Keys that are not provided will not be changed.
     */
    async setClientConfig(requestParameters: SetClientConfigOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.setClientConfigRaw(requestParameters, initOverrides);
    }

}
