/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    SessionSyncInfoError,
    SessionSyncInfoErrorFromJSON,
    SessionSyncInfoErrorFromJSONTyped,
    SessionSyncInfoErrorToJSON,
} from './SessionSyncInfoError';
import {
    SessionSyncInfoPending,
    SessionSyncInfoPendingFromJSON,
    SessionSyncInfoPendingFromJSONTyped,
    SessionSyncInfoPendingToJSON,
} from './SessionSyncInfoPending';
import {
    SessionSyncInfoSynced,
    SessionSyncInfoSyncedFromJSON,
    SessionSyncInfoSyncedFromJSONTyped,
    SessionSyncInfoSyncedToJSON,
} from './SessionSyncInfoSynced';

/**
 * @type SessionSyncInfo
 * 
 * @export
 */
export type SessionSyncInfo = { status: 'ERROR' } & SessionSyncInfoError | { status: 'PENDING' } & SessionSyncInfoPending | { status: 'SYNCED' } & SessionSyncInfoSynced;

export function SessionSyncInfoFromJSON(json: any): SessionSyncInfo {
    return SessionSyncInfoFromJSONTyped(json, false);
}

export function SessionSyncInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionSyncInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['status']) {
        case 'ERROR':
            return {...SessionSyncInfoErrorFromJSONTyped(json, true), status: 'ERROR'};
        case 'PENDING':
            return {...SessionSyncInfoPendingFromJSONTyped(json, true), status: 'PENDING'};
        case 'SYNCED':
            return {...SessionSyncInfoSyncedFromJSONTyped(json, true), status: 'SYNCED'};
        default:
            throw new Error(`No variant of SessionSyncInfo exists with 'status=${json['status']}'`);
    }
}

export function SessionSyncInfoToJSON(value?: SessionSyncInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['status']) {
        case 'ERROR':
            return SessionSyncInfoErrorToJSON(value);
        case 'PENDING':
            return SessionSyncInfoPendingToJSON(value);
        case 'SYNCED':
            return SessionSyncInfoSyncedToJSON(value);
        default:
            throw new Error(`No variant of SessionSyncInfo exists with 'status=${value['status']}'`);
    }
}

