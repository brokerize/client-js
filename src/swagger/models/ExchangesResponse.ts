/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ExchangeMeta,
    ExchangeMetaFromJSON,
    ExchangeMetaFromJSONTyped,
    ExchangeMetaToJSON,
} from './ExchangeMeta';

/**
 * 
 * @export
 * @interface ExchangesResponse
 */
export interface ExchangesResponse {
    /**
     * 
     * @type {Array<ExchangeMeta>}
     * @memberof ExchangesResponse
     */
    exchanges: Array<ExchangeMeta>;
}

export function ExchangesResponseFromJSON(json: any): ExchangesResponse {
    return ExchangesResponseFromJSONTyped(json, false);
}

export function ExchangesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExchangesResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exchanges': ((json['exchanges'] as Array<any>).map(ExchangeMetaFromJSON)),
    };
}

export function ExchangesResponseToJSONRecursive(value?: ExchangesResponse | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'exchanges': ((value.exchanges as Array<any>).map(ExchangeMetaToJSON)),
    };
}

export function ExchangesResponseToJSON(value?: ExchangesResponse | null): any {
    return ExchangesResponseToJSONRecursive(value, false);
}
