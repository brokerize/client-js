/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GenericTableRowValueDatetimeAllOf,
    GenericTableRowValueDatetimeAllOfFromJSON,
    GenericTableRowValueDatetimeAllOfFromJSONTyped,
    GenericTableRowValueDatetimeAllOfToJSON,
} from './GenericTableRowValueDatetimeAllOf';
import {
    GenericTableRowValueDatetimeSpecifics,
    GenericTableRowValueDatetimeSpecificsFromJSON,
    GenericTableRowValueDatetimeSpecificsFromJSONTyped,
    GenericTableRowValueDatetimeSpecificsToJSON,
} from './GenericTableRowValueDatetimeSpecifics';

/**
 * 
 * @export
 * @interface GenericTableRowValueDatetime
 */
export interface GenericTableRowValueDatetime {
    /**
     * 
     * @type {string}
     * @memberof GenericTableRowValueDatetime
     */
    type: GenericTableRowValueDatetimeTypeEnum;
    /**
     * *Milliseconds* since *the epoch*.
     * @type {number}
     * @memberof GenericTableRowValueDatetime
     */
    value: number;
}


/**
 * @export
 */
export const GenericTableRowValueDatetimeTypeEnum = {
    Datetime: 'datetime'
} as const;
export type GenericTableRowValueDatetimeTypeEnum = typeof GenericTableRowValueDatetimeTypeEnum[keyof typeof GenericTableRowValueDatetimeTypeEnum];


export function GenericTableRowValueDatetimeFromJSON(json: any): GenericTableRowValueDatetime {
    return GenericTableRowValueDatetimeFromJSONTyped(json, false);
}

export function GenericTableRowValueDatetimeFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenericTableRowValueDatetime {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'value': json['value'],
    };
}

export function GenericTableRowValueDatetimeToJSONRecursive(value?: GenericTableRowValueDatetime | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'type': value.type,
        'value': value.value,
    };
}

export function GenericTableRowValueDatetimeToJSON(value?: GenericTableRowValueDatetime | null): any {
    return GenericTableRowValueDatetimeToJSONRecursive(value, false);
}
