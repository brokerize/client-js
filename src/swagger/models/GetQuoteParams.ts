/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  Direction,
  DirectionFromJSON,
  DirectionFromJSONTyped,
  DirectionToJSON,
} from "./Direction";

/**
 *
 * @export
 * @interface GetQuoteParams
 */
export interface GetQuoteParams {
  /**
   *
   * @type {string}
   * @memberof GetQuoteParams
   */
  brokerExchangeId: string;
  /**
   * The `brokerSecurityId`, as provided by `PreparedTrade`.
   *
   * This is only optional temporarily and will be required in the future. So make sure to provide this.
   * @type {string}
   * @memberof GetQuoteParams
   */
  brokerSecurityId?: string;
  /**
   * If this makes a difference for the offer (e.g. bitpanda!), provide a cashAccountId
   * @type {string}
   * @memberof GetQuoteParams
   */
  cashAccountId?: string;
  /**
   *
   * @type {Direction}
   * @memberof GetQuoteParams
   */
  direction: Direction;
  /**
   * This will be deprecated and replaced by `brokerSecurityId` in the long term.
   * Make sure to fill `brokerSecurityId`.
   * @type {string}
   * @memberof GetQuoteParams
   */
  isin: string;
  /**
   *
   * @type {number}
   * @memberof GetQuoteParams
   */
  size: number;
  /**
   *
   * @type {string}
   * @memberof GetQuoteParams
   */
  sizeUnit?: string;
}

export function GetQuoteParamsFromJSON(json: any): GetQuoteParams {
  return GetQuoteParamsFromJSONTyped(json, false);
}

export function GetQuoteParamsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): GetQuoteParams {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    brokerExchangeId: json["brokerExchangeId"],
    brokerSecurityId: !exists(json, "brokerSecurityId")
      ? undefined
      : json["brokerSecurityId"],
    cashAccountId: !exists(json, "cashAccountId")
      ? undefined
      : json["cashAccountId"],
    direction: DirectionFromJSON(json["direction"]),
    isin: json["isin"],
    size: json["size"],
    sizeUnit: !exists(json, "sizeUnit") ? undefined : json["sizeUnit"],
  };
}

export function GetQuoteParamsToJSONRecursive(
  value?: GetQuoteParams | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    brokerExchangeId: value.brokerExchangeId,
    brokerSecurityId: value.brokerSecurityId,
    cashAccountId: value.cashAccountId,
    direction: DirectionToJSON(value.direction),
    isin: value.isin,
    size: value.size,
    sizeUnit: value.sizeUnit,
  };
}

export function GetQuoteParamsToJSON(value?: GetQuoteParams | null): any {
  return GetQuoteParamsToJSONRecursive(value, false);
}
