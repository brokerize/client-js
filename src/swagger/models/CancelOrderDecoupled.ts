/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  CancelOrderDecoupledAllOf,
  CancelOrderDecoupledAllOfFromJSON,
  CancelOrderDecoupledAllOfFromJSONTyped,
  CancelOrderDecoupledAllOfToJSON,
} from "./CancelOrderDecoupledAllOf";
import {
  CancelOrderDecoupledSpecifics,
  CancelOrderDecoupledSpecificsFromJSON,
  CancelOrderDecoupledSpecificsFromJSONTyped,
  CancelOrderDecoupledSpecificsToJSON,
} from "./CancelOrderDecoupledSpecifics";

/**
 *
 * @export
 * @interface CancelOrderDecoupled
 */
export interface CancelOrderDecoupled {
  /**
   *
   * @type {string}
   * @memberof CancelOrderDecoupled
   */
  mode: CancelOrderDecoupledModeEnum;
  /**
   *
   * @type {string}
   * @memberof CancelOrderDecoupled
   */
  authMethod?: string;
  /**
   * An optional client-defined tag which will appear in order reports. Note that the number of tags is limited per client and
   * if you use more tags, they will not be recorded.
   * @type {string}
   * @memberof CancelOrderDecoupled
   */
  reportingTag?: string;
}

/**
 * @export
 */
export const CancelOrderDecoupledModeEnum = {
  Decoupled: "decoupled",
} as const;
export type CancelOrderDecoupledModeEnum =
  (typeof CancelOrderDecoupledModeEnum)[keyof typeof CancelOrderDecoupledModeEnum];

export function CancelOrderDecoupledFromJSON(json: any): CancelOrderDecoupled {
  return CancelOrderDecoupledFromJSONTyped(json, false);
}

export function CancelOrderDecoupledFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): CancelOrderDecoupled {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    mode: json["mode"],
    authMethod: !exists(json, "authMethod") ? undefined : json["authMethod"],
    reportingTag: !exists(json, "reportingTag")
      ? undefined
      : json["reportingTag"],
  };
}

export function CancelOrderDecoupledToJSONRecursive(
  value?: CancelOrderDecoupled | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    mode: value.mode,
    authMethod: value.authMethod,
    reportingTag: value.reportingTag,
  };
}

export function CancelOrderDecoupledToJSON(
  value?: CancelOrderDecoupled | null
): any {
  return CancelOrderDecoupledToJSONRecursive(value, false);
}
