/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  Amount,
  AmountFromJSON,
  AmountFromJSONTyped,
  AmountToJSON,
} from "./Amount";
import {
  SummarizedTrade,
  SummarizedTradeFromJSON,
  SummarizedTradeFromJSONTyped,
  SummarizedTradeToJSON,
} from "./SummarizedTrade";
import {
  TradeStatisticsHoldingPeriodInDays,
  TradeStatisticsHoldingPeriodInDaysFromJSON,
  TradeStatisticsHoldingPeriodInDaysFromJSONTyped,
  TradeStatisticsHoldingPeriodInDaysToJSON,
} from "./TradeStatisticsHoldingPeriodInDays";

/**
 *
 * @export
 * @interface TradeStatistics
 */
export interface TradeStatistics {
  /**
   *
   * @type {Amount}
   * @memberof TradeStatistics
   */
  avgLossAbs?: Amount;
  /**
   *
   * @type {Amount}
   * @memberof TradeStatistics
   */
  avgProfitAbs?: Amount;
  /**
   *
   * @type {Amount}
   * @memberof TradeStatistics
   */
  avgProfitLossAbs?: Amount;
  /**
   *
   * @type {SummarizedTrade}
   * @memberof TradeStatistics
   */
  bestTrade?: SummarizedTrade;
  /**
   * Which fraction of the trades where winners. 1 is 100%, so a value of 1 would indicate
   * "all trades were winners".
   * @type {number}
   * @memberof TradeStatistics
   */
  hitRate: number;
  /**
   *
   * @type {TradeStatisticsHoldingPeriodInDays}
   * @memberof TradeStatistics
   */
  holdingPeriodInDays: TradeStatisticsHoldingPeriodInDays;
  /**
   * The maximum number of consecutive losing trades in the given list of trades.
   * @type {number}
   * @memberof TradeStatistics
   */
  longestLosingStreak: number;
  /**
   * The maximum number of consecutive winning trades in the given list of trades.
   * @type {number}
   * @memberof TradeStatistics
   */
  longestWinningStreak: number;
  /**
   * How many trades had a negative profit/loss.
   * @type {number}
   * @memberof TradeStatistics
   */
  loserCount: number;
  /**
   * Profits/Losses. E.g. if there were 2000€ profits in winning trades and 1000€ losses in losing trades,
   * the profitFactor would be 2000€ / 1000€ = 2.
   * @type {number}
   * @memberof TradeStatistics
   */
  profitFactor?: number;
  /**
   *
   * @type {Amount}
   * @memberof TradeStatistics
   */
  profitLossAbs?: Amount;
  /**
   * How many trades are part of the calculation.
   * @type {number}
   * @memberof TradeStatistics
   */
  tradeCount: number;
  /**
   * How many trades had a positive profit/loss.
   * @type {number}
   * @memberof TradeStatistics
   */
  winnerCount: number;
  /**
   * The proportion of trading days that ended with a net profit within the selected timeframe.
   *
   * - Calculated as the number of profitable trading days divided by the total number of trading days with activity.
   * - For example, if trades were executed on 10 days and 2 of those days resulted in a net profit, the ratio would be `0.2`.
   * - If no trades occurred during the selected period, the value is `undefined`.
   * @type {number}
   * @memberof TradeStatistics
   */
  winnerDaysRatio?: number;
  /**
   * The proportion of months that ended with a net profit within the selected timeframe.
   *
   * - Calculated as the number of profitable trading months divided by the total number of trading months with activity.
   * - For example, if trades were executed in 10 months and 2 of those months resulted in a net profit, the ratio would be `0.2`.
   * - If no trades occurred during the selected period, the value is `undefined`.
   * @type {number}
   * @memberof TradeStatistics
   */
  winnerMonthsRatio?: number;
  /**
   *
   * @type {SummarizedTrade}
   * @memberof TradeStatistics
   */
  worstTrade?: SummarizedTrade;
}

export function TradeStatisticsFromJSON(json: any): TradeStatistics {
  return TradeStatisticsFromJSONTyped(json, false);
}

export function TradeStatisticsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): TradeStatistics {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    avgLossAbs: !exists(json, "avgLossAbs")
      ? undefined
      : AmountFromJSON(json["avgLossAbs"]),
    avgProfitAbs: !exists(json, "avgProfitAbs")
      ? undefined
      : AmountFromJSON(json["avgProfitAbs"]),
    avgProfitLossAbs: !exists(json, "avgProfitLossAbs")
      ? undefined
      : AmountFromJSON(json["avgProfitLossAbs"]),
    bestTrade: !exists(json, "bestTrade")
      ? undefined
      : SummarizedTradeFromJSON(json["bestTrade"]),
    hitRate: json["hitRate"],
    holdingPeriodInDays: TradeStatisticsHoldingPeriodInDaysFromJSON(
      json["holdingPeriodInDays"]
    ),
    longestLosingStreak: json["longestLosingStreak"],
    longestWinningStreak: json["longestWinningStreak"],
    loserCount: json["loserCount"],
    profitFactor: !exists(json, "profitFactor")
      ? undefined
      : json["profitFactor"],
    profitLossAbs: !exists(json, "profitLossAbs")
      ? undefined
      : AmountFromJSON(json["profitLossAbs"]),
    tradeCount: json["tradeCount"],
    winnerCount: json["winnerCount"],
    winnerDaysRatio: !exists(json, "winnerDaysRatio")
      ? undefined
      : json["winnerDaysRatio"],
    winnerMonthsRatio: !exists(json, "winnerMonthsRatio")
      ? undefined
      : json["winnerMonthsRatio"],
    worstTrade: !exists(json, "worstTrade")
      ? undefined
      : SummarizedTradeFromJSON(json["worstTrade"]),
  };
}

export function TradeStatisticsToJSONRecursive(
  value?: TradeStatistics | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    avgLossAbs: AmountToJSON(value.avgLossAbs),
    avgProfitAbs: AmountToJSON(value.avgProfitAbs),
    avgProfitLossAbs: AmountToJSON(value.avgProfitLossAbs),
    bestTrade: SummarizedTradeToJSON(value.bestTrade),
    hitRate: value.hitRate,
    holdingPeriodInDays: TradeStatisticsHoldingPeriodInDaysToJSON(
      value.holdingPeriodInDays
    ),
    longestLosingStreak: value.longestLosingStreak,
    longestWinningStreak: value.longestWinningStreak,
    loserCount: value.loserCount,
    profitFactor: value.profitFactor,
    profitLossAbs: AmountToJSON(value.profitLossAbs),
    tradeCount: value.tradeCount,
    winnerCount: value.winnerCount,
    winnerDaysRatio: value.winnerDaysRatio,
    winnerMonthsRatio: value.winnerMonthsRatio,
    worstTrade: SummarizedTradeToJSON(value.worstTrade),
  };
}

export function TradeStatisticsToJSON(value?: TradeStatistics | null): any {
  return TradeStatisticsToJSONRecursive(value, false);
}
