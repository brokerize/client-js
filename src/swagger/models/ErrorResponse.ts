/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import { Hint, HintFromJSON, HintFromJSONTyped, HintToJSON } from "./Hint";
import {
  MaintenanceStatus,
  MaintenanceStatusFromJSON,
  MaintenanceStatusFromJSONTyped,
  MaintenanceStatusToJSON,
} from "./MaintenanceStatus";
import {
  ValidationDetail,
  ValidationDetailFromJSON,
  ValidationDetailFromJSONTyped,
  ValidationDetailToJSON,
} from "./ValidationDetail";

/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   * The error code.
   * Currently the following codes are implemented:
   *  'TRADING_ERROR', 'AUTH', 'RATE_LIMITED', 'VALIDATION_FAILED', 'MUST_ACCEPT_HINT', 'NO_SESSION_AVAILABLE_FOR_PORTFOLIO',
   *  'SECURITY_NOT_FOUND', 'SECURITY_NOT_TRADABLE_AT_EXCHANGE', 'ORDER_REJECTED', 'INTERNAL_SERVER_ERROR', 'MAINTENANCE',
   *  'INTERNAL_SERVER_ERROR_BROKER_API' | 'NOT_FOUND'
   * @type {string}
   * @memberof ErrorResponse
   */
  code: string;
  /**
   *
   * @type {Hint}
   * @memberof ErrorResponse
   */
  hint?: Hint;
  /**
   *
   * @type {MaintenanceStatus}
   * @memberof ErrorResponse
   */
  maintenanceStatus?: MaintenanceStatus;
  /**
   * The human-readable error message. If available, translated to the users's language.
   * This can always be displayed in frontends (if no specific error code handling is available).
   * @type {string}
   * @memberof ErrorResponse
   */
  msg: string;
  /**
   *
   * @type {string}
   * @memberof ErrorResponse
   */
  msgBrokerName?: string;
  /**
   * For validation errors (error code `VALIDATION_FAILED`), a map with the affected field as key and ValidationDetail
   * as value.
   * @type {{ [key: string]: ValidationDetail; }}
   * @memberof ErrorResponse
   */
  validationDetails?: { [key: string]: ValidationDetail };
}

export function ErrorResponseFromJSON(json: any): ErrorResponse {
  return ErrorResponseFromJSONTyped(json, false);
}

export function ErrorResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ErrorResponse {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    code: json["code"],
    hint: !exists(json, "hint") ? undefined : HintFromJSON(json["hint"]),
    maintenanceStatus: !exists(json, "maintenanceStatus")
      ? undefined
      : MaintenanceStatusFromJSON(json["maintenanceStatus"]),
    msg: json["msg"],
    msgBrokerName: !exists(json, "msgBrokerName")
      ? undefined
      : json["msgBrokerName"],
    validationDetails: !exists(json, "validationDetails")
      ? undefined
      : mapValues(json["validationDetails"], ValidationDetailFromJSON),
  };
}

export function ErrorResponseToJSONRecursive(
  value?: ErrorResponse | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    code: value.code,
    hint: HintToJSON(value.hint),
    maintenanceStatus: MaintenanceStatusToJSON(value.maintenanceStatus),
    msg: value.msg,
    msgBrokerName: value.msgBrokerName,
    validationDetails:
      value.validationDetails === undefined
        ? undefined
        : mapValues(value.validationDetails, ValidationDetailToJSON),
  };
}

export function ErrorResponseToJSON(value?: ErrorResponse | null): any {
  return ErrorResponseToJSONRecursive(value, false);
}
