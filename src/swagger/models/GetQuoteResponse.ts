/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Amount,
    AmountFromJSON,
    AmountFromJSONTyped,
    AmountToJSON,
} from './Amount';
import {
    Direction,
    DirectionFromJSON,
    DirectionFromJSONTyped,
    DirectionToJSON,
} from './Direction';
import {
    OrderCostEstimation,
    OrderCostEstimationFromJSON,
    OrderCostEstimationFromJSONTyped,
    OrderCostEstimationToJSON,
} from './OrderCostEstimation';
import {
    QuoteExpiration,
    QuoteExpirationFromJSON,
    QuoteExpirationFromJSONTyped,
    QuoteExpirationToJSON,
} from './QuoteExpiration';

/**
 * 
 * @export
 * @interface GetQuoteResponse
 */
export interface GetQuoteResponse {
    /**
     * Some token that identifies this exact quote response (referenced in the following trade requests).
     * @type {string}
     * @memberof GetQuoteResponse
     */
    quoteId: string;
    /**
     * 
     * @type {string}
     * @memberof GetQuoteResponse
     */
    isin: string;
    /**
     * 
     * @type {Direction}
     * @memberof GetQuoteResponse
     */
    direction: Direction;
    /**
     * If provided, the maximum available size that can be traded at the given price.
     * @type {number}
     * @memberof GetQuoteResponse
     */
    size?: number;
    /**
     * The human-readable name of the quote's source (e.g. the name of a stock exchange).
     * @type {string}
     * @memberof GetQuoteResponse
     */
    sourceName?: string;
    /**
     * 
     * @type {Amount}
     * @memberof GetQuoteResponse
     */
    quotation: Amount;
    /**
     * 
     * @type {QuoteExpiration}
     * @memberof GetQuoteResponse
     */
    expiration?: QuoteExpiration;
    /**
     * 
     * @type {OrderCostEstimation}
     * @memberof GetQuoteResponse
     */
    costEstimation?: OrderCostEstimation;
    /**
     * If the broker does not return a cost estimation summary, but it is possible to retrieve a cost estimation summary using the token.
     * @type {string}
     * @memberof GetQuoteResponse
     * @deprecated
     */
    costEstimationToken?: string;
}

export function GetQuoteResponseFromJSON(json: any): GetQuoteResponse {
    return GetQuoteResponseFromJSONTyped(json, false);
}

export function GetQuoteResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetQuoteResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'quoteId': json['quoteId'],
        'isin': json['isin'],
        'direction': DirectionFromJSON(json['direction']),
        'size': !exists(json, 'size') ? undefined : json['size'],
        'sourceName': !exists(json, 'sourceName') ? undefined : json['sourceName'],
        'quotation': AmountFromJSON(json['quotation']),
        'expiration': !exists(json, 'expiration') ? undefined : QuoteExpirationFromJSON(json['expiration']),
        'costEstimation': !exists(json, 'costEstimation') ? undefined : OrderCostEstimationFromJSON(json['costEstimation']),
        'costEstimationToken': !exists(json, 'costEstimationToken') ? undefined : json['costEstimationToken'],
    };
}

export function GetQuoteResponseToJSONRecursive(value?: GetQuoteResponse | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'quoteId': value.quoteId,
        'isin': value.isin,
        'direction': DirectionToJSON(value.direction),
        'size': value.size,
        'sourceName': value.sourceName,
        'quotation': AmountToJSON(value.quotation),
        'expiration': QuoteExpirationToJSON(value.expiration),
        'costEstimation': OrderCostEstimationToJSON(value.costEstimation),
        'costEstimationToken': value.costEstimationToken,
    };
}

export function GetQuoteResponseToJSON(value?: GetQuoteResponse | null): any {
    return GetQuoteResponseToJSONRecursive(value, false);
}
