/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 1.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  BrokerEnvironment,
  BrokerEnvironmentFromJSON,
  BrokerEnvironmentFromJSONTyped,
  BrokerEnvironmentToJSON,
} from "./BrokerEnvironment";
import {
  BrokerLoginForm,
  BrokerLoginFormFromJSON,
  BrokerLoginFormFromJSONTyped,
  BrokerLoginFormToJSON,
} from "./BrokerLoginForm";
import {
  BrokerMetaFeatures,
  BrokerMetaFeaturesFromJSON,
  BrokerMetaFeaturesFromJSONTyped,
  BrokerMetaFeaturesToJSON,
} from "./BrokerMetaFeatures";
import {
  BrokerMetaImages,
  BrokerMetaImagesFromJSON,
  BrokerMetaImagesFromJSONTyped,
  BrokerMetaImagesToJSON,
} from "./BrokerMetaImages";

/**
 *
 * @export
 * @interface BrokerMeta
 */
export interface BrokerMeta {
  /**
   *
   * @type {string}
   * @memberof BrokerMeta
   */
  brokerName: string;
  /**
   *
   * @type {string}
   * @memberof BrokerMeta
   */
  displayName: string;
  /**
   * If the user may choose the environment, it should usually be displayed as a select box in UIs.
   * The field's label explains what the meaning of environment is in the broker's context.
   * @type {string}
   * @memberof BrokerMeta
   */
  envLabel: string;
  /**
   *
   * @type {Array<BrokerEnvironment>}
   * @memberof BrokerMeta
   */
  envs: Array<BrokerEnvironment>;
  /**
   *
   * @type {BrokerMetaFeatures}
   * @memberof BrokerMeta
   */
  features: BrokerMetaFeatures;
  /**
   *
   * @type {BrokerMetaImages}
   * @memberof BrokerMeta
   */
  images: BrokerMetaImages;
  /**
   *
   * @type {BrokerLoginForm}
   * @memberof BrokerMeta
   */
  loginForm?: BrokerLoginForm;
  /**
   * If true, the user can login at the broker via OAuth (this involves browser redirects). Use `prepareOAuthRedirect` to obtain a URL to redirect to.
   * @type {boolean}
   * @memberof BrokerMeta
   */
  supportsOAuthLogin?: boolean;
}

export function BrokerMetaFromJSON(json: any): BrokerMeta {
  return BrokerMetaFromJSONTyped(json, false);
}

export function BrokerMetaFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): BrokerMeta {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    brokerName: json["brokerName"],
    displayName: json["displayName"],
    envLabel: json["envLabel"],
    envs: (json["envs"] as Array<any>).map(BrokerEnvironmentFromJSON),
    features: BrokerMetaFeaturesFromJSON(json["features"]),
    images: BrokerMetaImagesFromJSON(json["images"]),
    loginForm: !exists(json, "loginForm")
      ? undefined
      : BrokerLoginFormFromJSON(json["loginForm"]),
    supportsOAuthLogin: !exists(json, "supportsOAuthLogin")
      ? undefined
      : json["supportsOAuthLogin"],
  };
}

export function BrokerMetaToJSONRecursive(
  value?: BrokerMeta | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    brokerName: value.brokerName,
    displayName: value.displayName,
    envLabel: value.envLabel,
    envs: (value.envs as Array<any>).map(BrokerEnvironmentToJSON),
    features: BrokerMetaFeaturesToJSON(value.features),
    images: BrokerMetaImagesToJSON(value.images),
    loginForm: BrokerLoginFormToJSON(value.loginForm),
    supportsOAuthLogin: value.supportsOAuthLogin,
  };
}

export function BrokerMetaToJSON(value?: BrokerMeta | null): any {
  return BrokerMetaToJSONRecursive(value, false);
}
