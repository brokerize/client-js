/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BrokerEnvironment,
    BrokerEnvironmentFromJSON,
    BrokerEnvironmentFromJSONTyped,
    BrokerEnvironmentToJSON,
} from './BrokerEnvironment';
import {
    BrokerLoginForm,
    BrokerLoginFormFromJSON,
    BrokerLoginFormFromJSONTyped,
    BrokerLoginFormToJSON,
} from './BrokerLoginForm';
import {
    BrokerMetaFeatures,
    BrokerMetaFeaturesFromJSON,
    BrokerMetaFeaturesFromJSONTyped,
    BrokerMetaFeaturesToJSON,
} from './BrokerMetaFeatures';
import {
    BrokerMetaImages,
    BrokerMetaImagesFromJSON,
    BrokerMetaImagesFromJSONTyped,
    BrokerMetaImagesToJSON,
} from './BrokerMetaImages';

/**
 * 
 * @export
 * @interface BrokerMeta
 */
export interface BrokerMeta {
    /**
     * 
     * @type {BrokerMetaFeatures}
     * @memberof BrokerMeta
     */
    features: BrokerMetaFeatures;
    /**
     * 
     * @type {BrokerMetaImages}
     * @memberof BrokerMeta
     */
    images: BrokerMetaImages;
    /**
     * 
     * @type {string}
     * @memberof BrokerMeta
     */
    displayName: string;
    /**
     * If true, the user can login at the broker via OAuth (this involves browser redirects). Use `prepareOAuthRedirect` to obtain a URL to redirect to.
     * @type {boolean}
     * @memberof BrokerMeta
     */
    supportsOAuthLogin?: boolean;
    /**
     * 
     * @type {BrokerLoginForm}
     * @memberof BrokerMeta
     */
    loginForm?: BrokerLoginForm;
    /**
     * If the user may choose the environment, it should usually be displayed as a select box in UIs.
     * The field's label explains what the meaning of environment is in the broker's context.
     * @type {string}
     * @memberof BrokerMeta
     */
    envLabel: string;
    /**
     * 
     * @type {Array<BrokerEnvironment>}
     * @memberof BrokerMeta
     */
    envs: Array<BrokerEnvironment>;
    /**
     * 
     * @type {string}
     * @memberof BrokerMeta
     */
    brokerName: string;
}

export function BrokerMetaFromJSON(json: any): BrokerMeta {
    return BrokerMetaFromJSONTyped(json, false);
}

export function BrokerMetaFromJSONTyped(json: any, ignoreDiscriminator: boolean): BrokerMeta {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'features': BrokerMetaFeaturesFromJSON(json['features']),
        'images': BrokerMetaImagesFromJSON(json['images']),
        'displayName': json['displayName'],
        'supportsOAuthLogin': !exists(json, 'supportsOAuthLogin') ? undefined : json['supportsOAuthLogin'],
        'loginForm': !exists(json, 'loginForm') ? undefined : BrokerLoginFormFromJSON(json['loginForm']),
        'envLabel': json['envLabel'],
        'envs': ((json['envs'] as Array<any>).map(BrokerEnvironmentFromJSON)),
        'brokerName': json['brokerName'],
    };
}

export function BrokerMetaToJSONRecursive(value?: BrokerMeta | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'features': BrokerMetaFeaturesToJSON(value.features),
        'images': BrokerMetaImagesToJSON(value.images),
        'displayName': value.displayName,
        'supportsOAuthLogin': value.supportsOAuthLogin,
        'loginForm': BrokerLoginFormToJSON(value.loginForm),
        'envLabel': value.envLabel,
        'envs': ((value.envs as Array<any>).map(BrokerEnvironmentToJSON)),
        'brokerName': value.brokerName,
    };
}

export function BrokerMetaToJSON(value?: BrokerMeta | null): any {
    return BrokerMetaToJSONRecursive(value, false);
}
