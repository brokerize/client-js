/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  TakeProfitStopLossDetail,
  TakeProfitStopLossDetailFromJSON,
  TakeProfitStopLossDetailFromJSONTyped,
  TakeProfitStopLossDetailToJSON,
} from "./TakeProfitStopLossDetail";

/**
 * Describes whether and how takeProfit/stopLoss may be defined for an order.
 * For example, some brokers only allow takeProfit *or* stopLoss, not both.
 * @export
 * @interface TakeProfitStopLossCapabilites
 */
export interface TakeProfitStopLossCapabilites {
  /**
   * If this is `true`, only one of `takeProfit` or `stopLoss` can be set for an order.
   * If this is `false`, both can be set.
   * @type {boolean}
   * @memberof TakeProfitStopLossCapabilites
   */
  exclusive: boolean;
  /**
   *
   * @type {TakeProfitStopLossDetail}
   * @memberof TakeProfitStopLossCapabilites
   */
  stopLoss: TakeProfitStopLossDetail;
  /**
   *
   * @type {TakeProfitStopLossDetail}
   * @memberof TakeProfitStopLossCapabilites
   */
  takeProfit: TakeProfitStopLossDetail;
}

export function TakeProfitStopLossCapabilitesFromJSON(
  json: any
): TakeProfitStopLossCapabilites {
  return TakeProfitStopLossCapabilitesFromJSONTyped(json, false);
}

export function TakeProfitStopLossCapabilitesFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): TakeProfitStopLossCapabilites {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    exclusive: json["exclusive"],
    stopLoss: TakeProfitStopLossDetailFromJSON(json["stopLoss"]),
    takeProfit: TakeProfitStopLossDetailFromJSON(json["takeProfit"]),
  };
}

export function TakeProfitStopLossCapabilitesToJSONRecursive(
  value?: TakeProfitStopLossCapabilites | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    exclusive: value.exclusive,
    stopLoss: TakeProfitStopLossDetailToJSON(value.stopLoss),
    takeProfit: TakeProfitStopLossDetailToJSON(value.takeProfit),
  };
}

export function TakeProfitStopLossCapabilitesToJSON(
  value?: TakeProfitStopLossCapabilites | null
): any {
  return TakeProfitStopLossCapabilitesToJSONRecursive(value, false);
}
