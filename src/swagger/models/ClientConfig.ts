/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  BrokerEnvFilterType,
  BrokerEnvFilterTypeFromJSON,
  BrokerEnvFilterTypeFromJSONTyped,
  BrokerEnvFilterTypeToJSON,
} from "./BrokerEnvFilterType";
import {
  ClientConfigMaintenanceStatus,
  ClientConfigMaintenanceStatusFromJSON,
  ClientConfigMaintenanceStatusFromJSONTyped,
  ClientConfigMaintenanceStatusToJSON,
} from "./ClientConfigMaintenanceStatus";
import {
  GuestUserLifetime,
  GuestUserLifetimeFromJSON,
  GuestUserLifetimeFromJSONTyped,
  GuestUserLifetimeToJSON,
} from "./GuestUserLifetime";
import {
  OAuthLoginFormConfig,
  OAuthLoginFormConfigFromJSON,
  OAuthLoginFormConfigFromJSONTyped,
  OAuthLoginFormConfigToJSON,
} from "./OAuthLoginFormConfig";

/**
 * The client configuration as it appears in API endpoints.
 * @export
 * @interface ClientConfig
 */
export interface ClientConfig {
  /**
   *
   * @type {boolean}
   * @memberof ClientConfig
   */
  allowRequestsWithoutOrigin: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof ClientConfig
   */
  allowedOrigins: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ClientConfig
   */
  allowedOriginsRegularExpressions?: Array<string>;
  /**
   *
   * @type {{ [key: string]: BrokerEnvFilterType; }}
   * @memberof ClientConfig
   */
  brokerEnvFilter: { [key: string]: BrokerEnvFilterType };
  /**
   *
   * @type {Array<string>}
   * @memberof ClientConfig
   */
  cognitoClientIds: Array<string>;
  /**
   * If this is true, crypto trading is allowed for this client. If this is true, clients must send
   * some requests to the crypto trading service (for crypto orders) which is controlled by the flag `tradingViaCryptoService`.
   * @type {boolean}
   * @memberof ClientConfig
   */
  cryptoTradingAllowed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ClientConfig
   */
  enabled: boolean;
  /**
   *
   * @type {number}
   * @memberof ClientConfig
   */
  guestUserInactivityTimeoutSeconds?: number;
  /**
   *
   * @type {GuestUserLifetime}
   * @memberof ClientConfig
   */
  guestUserLifetime?: GuestUserLifetime;
  /**
   *
   * @type {string}
   * @memberof ClientConfig
   */
  legalEntityName: string;
  /**
   *
   * @type {ClientConfigMaintenanceStatus}
   * @memberof ClientConfig
   */
  maintenanceStatus?: ClientConfigMaintenanceStatus | null;
  /**
   *
   * @type {string}
   * @memberof ClientConfig
   */
  name: string;
  /**
   *
   * @type {OAuthLoginFormConfig}
   * @memberof ClientConfig
   */
  oAuthLoginForm?: OAuthLoginFormConfig;
  /**
   *
   * @type {Array<string>}
   * @memberof ClientConfig
   */
  oAuthReturnToRegularExpressions: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ClientConfig
   */
  oAuthReturnToUrls: Array<string>;
  /**
   *
   * @type {any}
   * @memberof ClientConfig
   */
  page: any | null;
}

export function ClientConfigFromJSON(json: any): ClientConfig {
  return ClientConfigFromJSONTyped(json, false);
}

export function ClientConfigFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ClientConfig {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    allowRequestsWithoutOrigin: json["allowRequestsWithoutOrigin"],
    allowedOrigins: json["allowedOrigins"],
    allowedOriginsRegularExpressions: !exists(
      json,
      "allowedOriginsRegularExpressions"
    )
      ? undefined
      : json["allowedOriginsRegularExpressions"],
    brokerEnvFilter: mapValues(
      json["brokerEnvFilter"],
      BrokerEnvFilterTypeFromJSON
    ),
    cognitoClientIds: json["cognitoClientIds"],
    cryptoTradingAllowed: !exists(json, "cryptoTradingAllowed")
      ? undefined
      : json["cryptoTradingAllowed"],
    enabled: json["enabled"],
    guestUserInactivityTimeoutSeconds: !exists(
      json,
      "guestUserInactivityTimeoutSeconds"
    )
      ? undefined
      : json["guestUserInactivityTimeoutSeconds"],
    guestUserLifetime: !exists(json, "guestUserLifetime")
      ? undefined
      : GuestUserLifetimeFromJSON(json["guestUserLifetime"]),
    legalEntityName: json["legalEntityName"],
    maintenanceStatus: !exists(json, "maintenanceStatus")
      ? undefined
      : ClientConfigMaintenanceStatusFromJSON(json["maintenanceStatus"]),
    name: json["name"],
    oAuthLoginForm: !exists(json, "oAuthLoginForm")
      ? undefined
      : OAuthLoginFormConfigFromJSON(json["oAuthLoginForm"]),
    oAuthReturnToRegularExpressions: json["oAuthReturnToRegularExpressions"],
    oAuthReturnToUrls: json["oAuthReturnToUrls"],
    page: json["page"],
  };
}

export function ClientConfigToJSONRecursive(
  value?: ClientConfig | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    allowRequestsWithoutOrigin: value.allowRequestsWithoutOrigin,
    allowedOrigins: value.allowedOrigins,
    allowedOriginsRegularExpressions: value.allowedOriginsRegularExpressions,
    brokerEnvFilter: mapValues(
      value.brokerEnvFilter,
      BrokerEnvFilterTypeToJSON
    ),
    cognitoClientIds: value.cognitoClientIds,
    cryptoTradingAllowed: value.cryptoTradingAllowed,
    enabled: value.enabled,
    guestUserInactivityTimeoutSeconds: value.guestUserInactivityTimeoutSeconds,
    guestUserLifetime: GuestUserLifetimeToJSON(value.guestUserLifetime),
    legalEntityName: value.legalEntityName,
    maintenanceStatus: ClientConfigMaintenanceStatusToJSON(
      value.maintenanceStatus
    ),
    name: value.name,
    oAuthLoginForm: OAuthLoginFormConfigToJSON(value.oAuthLoginForm),
    oAuthReturnToRegularExpressions: value.oAuthReturnToRegularExpressions,
    oAuthReturnToUrls: value.oAuthReturnToUrls,
    page: value.page,
  };
}

export function ClientConfigToJSON(value?: ClientConfig | null): any {
  return ClientConfigToJSONRecursive(value, false);
}
