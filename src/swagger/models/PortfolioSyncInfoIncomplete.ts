/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PortfolioSyncInfoIncompleteAllOf,
    PortfolioSyncInfoIncompleteAllOfFromJSON,
    PortfolioSyncInfoIncompleteAllOfFromJSONTyped,
    PortfolioSyncInfoIncompleteAllOfToJSON,
} from './PortfolioSyncInfoIncompleteAllOf';
import {
    PortfolioSyncInfoIncompleteSpecifics,
    PortfolioSyncInfoIncompleteSpecificsFromJSON,
    PortfolioSyncInfoIncompleteSpecificsFromJSONTyped,
    PortfolioSyncInfoIncompleteSpecificsToJSON,
} from './PortfolioSyncInfoIncompleteSpecifics';

/**
 * 
 * @export
 * @interface PortfolioSyncInfoIncomplete
 */
export interface PortfolioSyncInfoIncomplete {
    /**
     * 
     * @type {string}
     * @memberof PortfolioSyncInfoIncomplete
     */
    status: PortfolioSyncInfoIncompleteStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof PortfolioSyncInfoIncomplete
     */
    lastSync: Date;
}


/**
 * @export
 */
export const PortfolioSyncInfoIncompleteStatusEnum = {
    Incomplete: 'INCOMPLETE'
} as const;
export type PortfolioSyncInfoIncompleteStatusEnum = typeof PortfolioSyncInfoIncompleteStatusEnum[keyof typeof PortfolioSyncInfoIncompleteStatusEnum];


export function PortfolioSyncInfoIncompleteFromJSON(json: any): PortfolioSyncInfoIncomplete {
    return PortfolioSyncInfoIncompleteFromJSONTyped(json, false);
}

export function PortfolioSyncInfoIncompleteFromJSONTyped(json: any, ignoreDiscriminator: boolean): PortfolioSyncInfoIncomplete {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': json['status'],
        'lastSync': (new Date(json['lastSync'])),
    };
}

export function PortfolioSyncInfoIncompleteToJSONRecursive(value?: PortfolioSyncInfoIncomplete | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'status': value.status,
        'lastSync': (value.lastSync.toISOString()),
    };
}

export function PortfolioSyncInfoIncompleteToJSON(value?: PortfolioSyncInfoIncomplete | null): any {
    return PortfolioSyncInfoIncompleteToJSONRecursive(value, false);
}
