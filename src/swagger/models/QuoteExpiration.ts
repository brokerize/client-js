/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 1.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface QuoteExpiration
 */
export interface QuoteExpiration {
  /**
   * Timestamp at which the quotation expiration timer ends (after this, the quote order is likely to be rejected).
   * @type {Date}
   * @memberof QuoteExpiration
   */
  expires: Date;
  /**
   * Milliseconds to expiration. This can be calculated from `expires - started`, assuming the local clock works correctly.
   * Sometimes end users have not set their local clock correctly. You can either correct for the clock drift using the
   * `Date` HTTP header or just use this value and assume the expiration to happen at `time of receiving the response + milliseconds`.
   * @type {number}
   * @memberof QuoteExpiration
   */
  milliseconds: number;
  /**
   * Timestamp at which the quote expiration timer starts.
   * @type {Date}
   * @memberof QuoteExpiration
   */
  started: Date;
}

export function QuoteExpirationFromJSON(json: any): QuoteExpiration {
  return QuoteExpirationFromJSONTyped(json, false);
}

export function QuoteExpirationFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): QuoteExpiration {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    expires: new Date(json["expires"]),
    milliseconds: json["milliseconds"],
    started: new Date(json["started"]),
  };
}

export function QuoteExpirationToJSONRecursive(
  value?: QuoteExpiration | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    expires: value.expires.toISOString(),
    milliseconds: value.milliseconds,
    started: value.started.toISOString(),
  };
}

export function QuoteExpirationToJSON(value?: QuoteExpiration | null): any {
  return QuoteExpirationToJSONRecursive(value, false);
}
