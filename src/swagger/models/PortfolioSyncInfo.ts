/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    PortfolioSyncInfoComplete,
    PortfolioSyncInfoCompleteFromJSON,
    PortfolioSyncInfoCompleteFromJSONTyped,
    PortfolioSyncInfoCompleteToJSON,
} from './PortfolioSyncInfoComplete';
import {
    PortfolioSyncInfoError,
    PortfolioSyncInfoErrorFromJSON,
    PortfolioSyncInfoErrorFromJSONTyped,
    PortfolioSyncInfoErrorToJSON,
} from './PortfolioSyncInfoError';
import {
    PortfolioSyncInfoIncomplete,
    PortfolioSyncInfoIncompleteFromJSON,
    PortfolioSyncInfoIncompleteFromJSONTyped,
    PortfolioSyncInfoIncompleteToJSON,
} from './PortfolioSyncInfoIncomplete';
import {
    PortfolioSyncInfoPending,
    PortfolioSyncInfoPendingFromJSON,
    PortfolioSyncInfoPendingFromJSONTyped,
    PortfolioSyncInfoPendingToJSON,
} from './PortfolioSyncInfoPending';

/**
 * @type PortfolioSyncInfo
 * 
 * @export
 */
export type PortfolioSyncInfo = { status: 'COMPLETE' } & PortfolioSyncInfoComplete | { status: 'ERROR' } & PortfolioSyncInfoError | { status: 'INCOMPLETE' } & PortfolioSyncInfoIncomplete | { status: 'PENDING' } & PortfolioSyncInfoPending;

export function PortfolioSyncInfoFromJSON(json: any): PortfolioSyncInfo {
    return PortfolioSyncInfoFromJSONTyped(json, false);
}

export function PortfolioSyncInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PortfolioSyncInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['status']) {
        case 'COMPLETE':
            return {...PortfolioSyncInfoCompleteFromJSONTyped(json, true), status: 'COMPLETE'};
        case 'ERROR':
            return {...PortfolioSyncInfoErrorFromJSONTyped(json, true), status: 'ERROR'};
        case 'INCOMPLETE':
            return {...PortfolioSyncInfoIncompleteFromJSONTyped(json, true), status: 'INCOMPLETE'};
        case 'PENDING':
            return {...PortfolioSyncInfoPendingFromJSONTyped(json, true), status: 'PENDING'};
        default:
            throw new Error(`No variant of PortfolioSyncInfo exists with 'status=${json['status']}'`);
    }
}

export function PortfolioSyncInfoToJSON(value?: PortfolioSyncInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['status']) {
        case 'COMPLETE':
            return PortfolioSyncInfoCompleteToJSON(value);
        case 'ERROR':
            return PortfolioSyncInfoErrorToJSON(value);
        case 'INCOMPLETE':
            return PortfolioSyncInfoIncompleteToJSON(value);
        case 'PENDING':
            return PortfolioSyncInfoPendingToJSON(value);
        default:
            throw new Error(`No variant of PortfolioSyncInfo exists with 'status=${value['status']}'`);
    }
}

