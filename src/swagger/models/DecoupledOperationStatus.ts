/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  DecoupledOperationState,
  DecoupledOperationStateFromJSON,
  DecoupledOperationStateFromJSONTyped,
  DecoupledOperationStateToJSON,
} from "./DecoupledOperationState";

/**
 *
 * @export
 * @interface DecoupledOperationStatus
 */
export interface DecoupledOperationStatus {
  /**
   * If:
   * - the decoupled operation is an order creation
   * - *AND* it is in the state `AUTHORIZATION_USER_ACCEPTED`
   * - *AND* the broker supports retrieving this information
   *
   * This is the id of the created order. Note that depending on the broker, it is possible
   * (as with non-decoupled order creations as well), that the broker does not return this id, but
   * instead will add the order to the order book asynchronously. In this case it is not possible to directly
   * show an order receipt, but just a message (e.g. "Order has been created successfully - check order list for updates").
   * @type {string}
   * @memberof DecoupledOperationStatus
   */
  createdOrderId?: string;
  /**
   *
   * @type {DecoupledOperationState}
   * @memberof DecoupledOperationStatus
   */
  state: DecoupledOperationState;
  /**
   *
   * @type {string}
   * @memberof DecoupledOperationStatus
   */
  text?: string;
}

export function DecoupledOperationStatusFromJSON(
  json: any
): DecoupledOperationStatus {
  return DecoupledOperationStatusFromJSONTyped(json, false);
}

export function DecoupledOperationStatusFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): DecoupledOperationStatus {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    createdOrderId: !exists(json, "createdOrderId")
      ? undefined
      : json["createdOrderId"],
    state: DecoupledOperationStateFromJSON(json["state"]),
    text: !exists(json, "text") ? undefined : json["text"],
  };
}

export function DecoupledOperationStatusToJSONRecursive(
  value?: DecoupledOperationStatus | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    createdOrderId: value.createdOrderId,
    state: DecoupledOperationStateToJSON(value.state),
    text: value.text,
  };
}

export function DecoupledOperationStatusToJSON(
  value?: DecoupledOperationStatus | null
): any {
  return DecoupledOperationStatusToJSONRecursive(value, false);
}
