/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    AuthMethodChallengeResponse,
    AuthMethodChallengeResponseFromJSON,
    AuthMethodChallengeResponseFromJSONTyped,
    AuthMethodChallengeResponseToJSON,
} from './AuthMethodChallengeResponse';
import {
    AuthMethodDecoupled,
    AuthMethodDecoupledFromJSON,
    AuthMethodDecoupledFromJSONTyped,
    AuthMethodDecoupledToJSON,
} from './AuthMethodDecoupled';
import {
    AuthMethodTan,
    AuthMethodTanFromJSON,
    AuthMethodTanFromJSONTyped,
    AuthMethodTanToJSON,
} from './AuthMethodTan';

/**
 * @type AuthMethod
 * 
 * @export
 */
export type AuthMethod = { flow: 'CHALLENGE_RESPONSE' } & AuthMethodChallengeResponse | { flow: 'DECOUPLED' } & AuthMethodDecoupled | { flow: 'TAN' } & AuthMethodTan;

export function AuthMethodFromJSON(json: any): AuthMethod {
    return AuthMethodFromJSONTyped(json, false);
}

export function AuthMethodFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthMethod {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['flow']) {
        case 'CHALLENGE_RESPONSE':
            return {...AuthMethodChallengeResponseFromJSONTyped(json, true), flow: 'CHALLENGE_RESPONSE'};
        case 'DECOUPLED':
            return {...AuthMethodDecoupledFromJSONTyped(json, true), flow: 'DECOUPLED'};
        case 'TAN':
            return {...AuthMethodTanFromJSONTyped(json, true), flow: 'TAN'};
        default:
            throw new Error(`No variant of AuthMethod exists with 'flow=${json['flow']}'`);
    }
}

export function AuthMethodToJSON(value?: AuthMethod | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['flow']) {
        case 'CHALLENGE_RESPONSE':
            return AuthMethodChallengeResponseToJSON(value);
        case 'DECOUPLED':
            return AuthMethodDecoupledToJSON(value);
        case 'TAN':
            return AuthMethodTanToJSON(value);
        default:
            throw new Error(`No variant of AuthMethod exists with 'flow=${value['flow']}'`);
    }
}

