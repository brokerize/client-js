/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AuthMethod,
    AuthMethodFromJSON,
    AuthMethodFromJSONTyped,
    AuthMethodToJSON,
} from './AuthMethod';

/**
 * 
 * @export
 * @interface AuthInfo
 */
export interface AuthInfo {
    /**
     * If this is present and true, the only operation that the AuthMethods can be used to is to activate Session TAN (`session.authorizeSessionTan`).
     * All other operations (e.g. order creation etc.) require Session TAN to be activated first.
     * @type {boolean}
     * @memberof AuthInfo
     */
    allOperationsRequireSessionTan?: boolean;
    /**
     * 
     * @type {Array<AuthMethod>}
     * @memberof AuthInfo
     */
    authMethods: Array<AuthMethod>;
    /**
     * If this is true, session TAN can be ended using the `EndSessionTan` endpoint when it is no longer needed, leaving the
     * session active. This is not supported by all brokers.
     * @type {boolean}
     * @memberof AuthInfo
     */
    sessionTanCanBeEnded: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuthInfo
     */
    sessionTanSupported?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AuthInfo
     */
    sessionTanActive?: boolean;
}

export function AuthInfoFromJSON(json: any): AuthInfo {
    return AuthInfoFromJSONTyped(json, false);
}

export function AuthInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allOperationsRequireSessionTan': !exists(json, 'allOperationsRequireSessionTan') ? undefined : json['allOperationsRequireSessionTan'],
        'authMethods': ((json['authMethods'] as Array<any>).map(AuthMethodFromJSON)),
        'sessionTanCanBeEnded': json['sessionTanCanBeEnded'],
        'sessionTanSupported': !exists(json, 'sessionTanSupported') ? undefined : json['sessionTanSupported'],
        'sessionTanActive': !exists(json, 'sessionTanActive') ? undefined : json['sessionTanActive'],
    };
}

export function AuthInfoToJSONRecursive(value?: AuthInfo | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'allOperationsRequireSessionTan': value.allOperationsRequireSessionTan,
        'authMethods': ((value.authMethods as Array<any>).map(AuthMethodToJSON)),
        'sessionTanCanBeEnded': value.sessionTanCanBeEnded,
        'sessionTanSupported': value.sessionTanSupported,
        'sessionTanActive': value.sessionTanActive,
    };
}

export function AuthInfoToJSON(value?: AuthInfo | null): any {
    return AuthInfoToJSONRecursive(value, false);
}
