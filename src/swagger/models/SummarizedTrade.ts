/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  Amount,
  AmountFromJSON,
  AmountFromJSONTyped,
  AmountToJSON,
} from "./Amount";
import {
  Security,
  SecurityFromJSON,
  SecurityFromJSONTyped,
  SecurityToJSON,
} from "./Security";

/**
 *
 * @export
 * @interface SummarizedTrade
 */
export interface SummarizedTrade {
  /**
   *
   * @type {Date}
   * @memberof SummarizedTrade
   */
  closeDateTime: Date;
  /**
   *
   * @type {string}
   * @memberof SummarizedTrade
   */
  details: string;
  /**
   *
   * @type {Amount}
   * @memberof SummarizedTrade
   */
  fees?: Amount;
  /**
   *
   * @type {string}
   * @memberof SummarizedTrade
   */
  id: string;
  /**
   *
   * @type {Date}
   * @memberof SummarizedTrade
   */
  openDateTime: Date;
  /**
   *
   * @type {Amount}
   * @memberof SummarizedTrade
   */
  profitLossAbs: Amount;
  /**
   *
   * @type {number}
   * @memberof SummarizedTrade
   */
  profitLossRel: number;
  /**
   *
   * @type {Security}
   * @memberof SummarizedTrade
   */
  security: Security;
  /**
   *
   * @type {Amount}
   * @memberof SummarizedTrade
   */
  size: Amount;
}

export function SummarizedTradeFromJSON(json: any): SummarizedTrade {
  return SummarizedTradeFromJSONTyped(json, false);
}

export function SummarizedTradeFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): SummarizedTrade {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    closeDateTime: new Date(json["closeDateTime"]),
    details: json["details"],
    fees: !exists(json, "fees") ? undefined : AmountFromJSON(json["fees"]),
    id: json["id"],
    openDateTime: new Date(json["openDateTime"]),
    profitLossAbs: AmountFromJSON(json["profitLossAbs"]),
    profitLossRel: json["profitLossRel"],
    security: SecurityFromJSON(json["security"]),
    size: AmountFromJSON(json["size"]),
  };
}

export function SummarizedTradeToJSONRecursive(
  value?: SummarizedTrade | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    closeDateTime: value.closeDateTime.toISOString(),
    details: value.details,
    fees: AmountToJSON(value.fees),
    id: value.id,
    openDateTime: value.openDateTime.toISOString(),
    profitLossAbs: AmountToJSON(value.profitLossAbs),
    profitLossRel: value.profitLossRel,
    security: SecurityToJSON(value.security),
    size: AmountToJSON(value.size),
  };
}

export function SummarizedTradeToJSON(value?: SummarizedTrade | null): any {
  return SummarizedTradeToJSONRecursive(value, false);
}
