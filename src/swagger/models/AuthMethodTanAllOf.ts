/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuthMethodTanAllOf
 */
export interface AuthMethodTanAllOf {
    /**
     * 
     * @type {string}
     * @memberof AuthMethodTanAllOf
     */
    flow?: AuthMethodTanAllOfFlowEnum;
}


/**
 * @export
 */
export const AuthMethodTanAllOfFlowEnum = {
    Tan: 'TAN'
} as const;
export type AuthMethodTanAllOfFlowEnum = typeof AuthMethodTanAllOfFlowEnum[keyof typeof AuthMethodTanAllOfFlowEnum];


export function AuthMethodTanAllOfFromJSON(json: any): AuthMethodTanAllOf {
    return AuthMethodTanAllOfFromJSONTyped(json, false);
}

export function AuthMethodTanAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthMethodTanAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'flow': !exists(json, 'flow') ? undefined : json['flow'],
    };
}

export function AuthMethodTanAllOfToJSONRecursive(value?: AuthMethodTanAllOf | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'flow': value.flow,
    };
}

export function AuthMethodTanAllOfToJSON(value?: AuthMethodTanAllOf | null): any {
    return AuthMethodTanAllOfToJSONRecursive(value, false);
}
