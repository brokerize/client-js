/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    CancelOrderChallengeResponse,
    CancelOrderChallengeResponseFromJSON,
    CancelOrderChallengeResponseFromJSONTyped,
    CancelOrderChallengeResponseToJSON,
} from './CancelOrderChallengeResponse';
import {
    CreateModeSessionTan,
    CreateModeSessionTanFromJSON,
    CreateModeSessionTanFromJSONTyped,
    CreateModeSessionTanToJSON,
} from './CreateModeSessionTan';

/**
 * @type CancelOrderParams
 * 
 * @export
 */
export type CancelOrderParams = { mode: 'challengeResponse' } & CancelOrderChallengeResponse | { mode: 'sessionTan' } & CreateModeSessionTan;

export function CancelOrderParamsFromJSON(json: any): CancelOrderParams {
    return CancelOrderParamsFromJSONTyped(json, false);
}

export function CancelOrderParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CancelOrderParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['mode']) {
        case 'challengeResponse':
            return {...CancelOrderChallengeResponseFromJSONTyped(json, true), mode: 'challengeResponse'};
        case 'sessionTan':
            return {...CreateModeSessionTanFromJSONTyped(json, true), mode: 'sessionTan'};
        default:
            throw new Error(`No variant of CancelOrderParams exists with 'mode=${json['mode']}'`);
    }
}

export function CancelOrderParamsToJSON(value?: CancelOrderParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['mode']) {
        case 'challengeResponse':
            return CancelOrderChallengeResponseToJSON(value);
        case 'sessionTan':
            return CreateModeSessionTanToJSON(value);
        default:
            throw new Error(`No variant of CancelOrderParams exists with 'mode=${value['mode']}'`);
    }
}

