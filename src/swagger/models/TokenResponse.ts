/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
  /**
   *
   * @type {string}
   * @memberof TokenResponse
   */
  accessToken: string;
  /**
   *
   * @type {number}
   * @memberof TokenResponse
   */
  expiresIn: number;
  /**
   *
   * @type {string}
   * @memberof TokenResponse
   */
  refreshToken: string;
  /**
   *
   * @type {number}
   * @memberof TokenResponse
   */
  refreshTokenExpiresIn: number;
  /**
   * If applicable for the client configuration, another refresh token which does not have
   * access to the current trading session. It can be used to acquire a new trading session.
   * @type {string}
   * @memberof TokenResponse
   */
  refreshTokenWithoutTradingsession?: string;
  /**
   *
   * @type {number}
   * @memberof TokenResponse
   */
  refreshTokenWithoutTradingsessionExpiresIn?: number;
  /**
   * token_type, it should always be "bearer"
   * @type {string}
   * @memberof TokenResponse
   */
  tokenType: string;
}

export function TokenResponseFromJSON(json: any): TokenResponse {
  return TokenResponseFromJSONTyped(json, false);
}

export function TokenResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): TokenResponse {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    accessToken: json["access_token"],
    expiresIn: json["expires_in"],
    refreshToken: json["refresh_token"],
    refreshTokenExpiresIn: json["refresh_token_expires_in"],
    refreshTokenWithoutTradingsession: !exists(
      json,
      "refresh_token_without_tradingsession"
    )
      ? undefined
      : json["refresh_token_without_tradingsession"],
    refreshTokenWithoutTradingsessionExpiresIn: !exists(
      json,
      "refresh_token_without_tradingsession_expires_in"
    )
      ? undefined
      : json["refresh_token_without_tradingsession_expires_in"],
    tokenType: json["token_type"],
  };
}

export function TokenResponseToJSONRecursive(
  value?: TokenResponse | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    access_token: value.accessToken,
    expires_in: value.expiresIn,
    refresh_token: value.refreshToken,
    refresh_token_expires_in: value.refreshTokenExpiresIn,
    refresh_token_without_tradingsession:
      value.refreshTokenWithoutTradingsession,
    refresh_token_without_tradingsession_expires_in:
      value.refreshTokenWithoutTradingsessionExpiresIn,
    token_type: value.tokenType,
  };
}

export function TokenResponseToJSON(value?: TokenResponse | null): any {
  return TokenResponseToJSONRecursive(value, false);
}
