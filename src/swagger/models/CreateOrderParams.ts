/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OrderCreate,
    OrderCreateFromJSON,
    OrderCreateFromJSONTyped,
    OrderCreateToJSON,
} from './OrderCreate';

/**
 * 
 * @export
 * @interface CreateOrderParams
 */
export interface CreateOrderParams {
    /**
     * If the order has been rejected with code `MUST_ACCEPT_HINT` before, the order creation can be retried with setting the
     * `acceptHintId` accordingly after letting the user accept the hint.
     * @type {string}
     * @memberof CreateOrderParams
     */
    acceptHintId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderParams
     */
    authMethod?: string;
    /**
     * 
     * @type {OrderCreate}
     * @memberof CreateOrderParams
     */
    order: OrderCreate;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderParams
     */
    challengeId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderParams
     */
    challengeResponse?: string;
}

export function CreateOrderParamsFromJSON(json: any): CreateOrderParams {
    return CreateOrderParamsFromJSONTyped(json, false);
}

export function CreateOrderParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOrderParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'acceptHintId': !exists(json, 'acceptHintId') ? undefined : json['acceptHintId'],
        'authMethod': !exists(json, 'authMethod') ? undefined : json['authMethod'],
        'order': OrderCreateFromJSON(json['order']),
        'challengeId': !exists(json, 'challengeId') ? undefined : json['challengeId'],
        'challengeResponse': !exists(json, 'challengeResponse') ? undefined : json['challengeResponse'],
    };
}

export function CreateOrderParamsToJSONRecursive(value?: CreateOrderParams | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'acceptHintId': value.acceptHintId,
        'authMethod': value.authMethod,
        'order': OrderCreateToJSON(value.order),
        'challengeId': value.challengeId,
        'challengeResponse': value.challengeResponse,
    };
}

export function CreateOrderParamsToJSON(value?: CreateOrderParams | null): any {
    return CreateOrderParamsToJSONRecursive(value, false);
}
