/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Amount,
    AmountFromJSON,
    AmountFromJSONTyped,
    AmountToJSON,
} from './Amount';

/**
 * 
 * @export
 * @interface OrderExecution
 */
export interface OrderExecution {
    /**
     * 
     * @type {number}
     * @memberof OrderExecution
     */
    crossRate?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderExecution
     */
    executionStatusText?: string;
    /**
     * 
     * @type {Date}
     * @memberof OrderExecution
     */
    executedDateTime?: Date;
    /**
     * 
     * @type {Amount}
     * @memberof OrderExecution
     */
    totalAmount?: Amount;
    /**
     * 
     * @type {Amount}
     * @memberof OrderExecution
     */
    amount?: Amount;
    /**
     * 
     * @type {Amount}
     * @memberof OrderExecution
     */
    tax?: Amount;
    /**
     * 
     * @type {Amount}
     * @memberof OrderExecution
     */
    transactionTax?: Amount;
    /**
     * 
     * @type {Amount}
     * @memberof OrderExecution
     */
    quote?: Amount;
    /**
     * 
     * @type {Amount}
     * @memberof OrderExecution
     */
    size: Amount;
    /**
     * 
     * @type {string}
     * @memberof OrderExecution
     */
    id?: string;
}

export function OrderExecutionFromJSON(json: any): OrderExecution {
    return OrderExecutionFromJSONTyped(json, false);
}

export function OrderExecutionFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderExecution {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'crossRate': !exists(json, 'crossRate') ? undefined : json['crossRate'],
        'executionStatusText': !exists(json, 'executionStatusText') ? undefined : json['executionStatusText'],
        'executedDateTime': !exists(json, 'executedDateTime') ? undefined : (new Date(json['executedDateTime'])),
        'totalAmount': !exists(json, 'totalAmount') ? undefined : AmountFromJSON(json['totalAmount']),
        'amount': !exists(json, 'amount') ? undefined : AmountFromJSON(json['amount']),
        'tax': !exists(json, 'tax') ? undefined : AmountFromJSON(json['tax']),
        'transactionTax': !exists(json, 'transactionTax') ? undefined : AmountFromJSON(json['transactionTax']),
        'quote': !exists(json, 'quote') ? undefined : AmountFromJSON(json['quote']),
        'size': AmountFromJSON(json['size']),
        'id': !exists(json, 'id') ? undefined : json['id'],
    };
}

export function OrderExecutionToJSONRecursive(value?: OrderExecution | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'crossRate': value.crossRate,
        'executionStatusText': value.executionStatusText,
        'executedDateTime': value.executedDateTime === undefined ? undefined : (value.executedDateTime.toISOString()),
        'totalAmount': AmountToJSON(value.totalAmount),
        'amount': AmountToJSON(value.amount),
        'tax': AmountToJSON(value.tax),
        'transactionTax': AmountToJSON(value.transactionTax),
        'quote': AmountToJSON(value.quote),
        'size': AmountToJSON(value.size),
        'id': value.id,
    };
}

export function OrderExecutionToJSON(value?: OrderExecution | null): any {
    return OrderExecutionToJSONRecursive(value, false);
}
