/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  Amount,
  AmountFromJSON,
  AmountFromJSONTyped,
  AmountToJSON,
} from "./Amount";

/**
 *
 * @export
 * @interface OrderExecution
 */
export interface OrderExecution {
  /**
   *
   * @type {Amount}
   * @memberof OrderExecution
   */
  amount?: Amount;
  /**
   *
   * @type {number}
   * @memberof OrderExecution
   */
  crossRate?: number;
  /**
   *
   * @type {Date}
   * @memberof OrderExecution
   */
  executedDateTime?: Date;
  /**
   *
   * @type {string}
   * @memberof OrderExecution
   */
  executionStatusText?: string;
  /**
   *
   * @type {string}
   * @memberof OrderExecution
   */
  id?: string;
  /**
   *
   * @type {Amount}
   * @memberof OrderExecution
   */
  quote?: Amount;
  /**
   *
   * @type {Amount}
   * @memberof OrderExecution
   */
  size: Amount;
  /**
   *
   * @type {Amount}
   * @memberof OrderExecution
   */
  tax?: Amount;
  /**
   *
   * @type {Amount}
   * @memberof OrderExecution
   */
  totalAmount?: Amount;
  /**
   *
   * @type {Amount}
   * @memberof OrderExecution
   */
  transactionTax?: Amount;
}

export function OrderExecutionFromJSON(json: any): OrderExecution {
  return OrderExecutionFromJSONTyped(json, false);
}

export function OrderExecutionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): OrderExecution {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    amount: !exists(json, "amount")
      ? undefined
      : AmountFromJSON(json["amount"]),
    crossRate: !exists(json, "crossRate") ? undefined : json["crossRate"],
    executedDateTime: !exists(json, "executedDateTime")
      ? undefined
      : new Date(json["executedDateTime"]),
    executionStatusText: !exists(json, "executionStatusText")
      ? undefined
      : json["executionStatusText"],
    id: !exists(json, "id") ? undefined : json["id"],
    quote: !exists(json, "quote") ? undefined : AmountFromJSON(json["quote"]),
    size: AmountFromJSON(json["size"]),
    tax: !exists(json, "tax") ? undefined : AmountFromJSON(json["tax"]),
    totalAmount: !exists(json, "totalAmount")
      ? undefined
      : AmountFromJSON(json["totalAmount"]),
    transactionTax: !exists(json, "transactionTax")
      ? undefined
      : AmountFromJSON(json["transactionTax"]),
  };
}

export function OrderExecutionToJSONRecursive(
  value?: OrderExecution | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    amount: AmountToJSON(value.amount),
    crossRate: value.crossRate,
    executedDateTime:
      value.executedDateTime === undefined
        ? undefined
        : value.executedDateTime.toISOString(),
    executionStatusText: value.executionStatusText,
    id: value.id,
    quote: AmountToJSON(value.quote),
    size: AmountToJSON(value.size),
    tax: AmountToJSON(value.tax),
    totalAmount: AmountToJSON(value.totalAmount),
    transactionTax: AmountToJSON(value.transactionTax),
  };
}

export function OrderExecutionToJSON(value?: OrderExecution | null): any {
  return OrderExecutionToJSONRecursive(value, false);
}
