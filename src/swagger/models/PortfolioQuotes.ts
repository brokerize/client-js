/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 1.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  Amount,
  AmountFromJSON,
  AmountFromJSONTyped,
  AmountToJSON,
} from "./Amount";

/**
 *
 * @export
 * @interface PortfolioQuotes
 */
export interface PortfolioQuotes {
  /**
   *
   * @type {Amount}
   * @memberof PortfolioQuotes
   */
  availableCash?: Amount;
  /**
   *
   * @type {Amount}
   * @memberof PortfolioQuotes
   */
  cashAccountBalance?: Amount;
  /**
   *
   * @type {Amount}
   * @memberof PortfolioQuotes
   */
  positionValue?: Amount;
  /**
   *
   * @type {Amount}
   * @memberof PortfolioQuotes
   */
  profitLossAbs?: Amount;
  /**
   *
   * @type {Amount}
   * @memberof PortfolioQuotes
   */
  profitLossAbsPrevClose?: Amount;
  /**
   * Relative P/L of all open positions, since acquisition. 1 means +100%
   * @type {number}
   * @memberof PortfolioQuotes
   */
  profitLossRel?: number;
  /**
   * Relative P/L of all open positions, since prevClose (or buy, if that is later than prevClose). 1 means +100%
   * @type {number}
   * @memberof PortfolioQuotes
   */
  profitLossRelPrevClose?: number;
  /**
   *
   * @type {Amount}
   * @memberof PortfolioQuotes
   */
  totalValue?: Amount;
}

export function PortfolioQuotesFromJSON(json: any): PortfolioQuotes {
  return PortfolioQuotesFromJSONTyped(json, false);
}

export function PortfolioQuotesFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): PortfolioQuotes {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    availableCash: !exists(json, "availableCash")
      ? undefined
      : AmountFromJSON(json["availableCash"]),
    cashAccountBalance: !exists(json, "cashAccountBalance")
      ? undefined
      : AmountFromJSON(json["cashAccountBalance"]),
    positionValue: !exists(json, "positionValue")
      ? undefined
      : AmountFromJSON(json["positionValue"]),
    profitLossAbs: !exists(json, "profitLossAbs")
      ? undefined
      : AmountFromJSON(json["profitLossAbs"]),
    profitLossAbsPrevClose: !exists(json, "profitLossAbsPrevClose")
      ? undefined
      : AmountFromJSON(json["profitLossAbsPrevClose"]),
    profitLossRel: !exists(json, "profitLossRel")
      ? undefined
      : json["profitLossRel"],
    profitLossRelPrevClose: !exists(json, "profitLossRelPrevClose")
      ? undefined
      : json["profitLossRelPrevClose"],
    totalValue: !exists(json, "totalValue")
      ? undefined
      : AmountFromJSON(json["totalValue"]),
  };
}

export function PortfolioQuotesToJSONRecursive(
  value?: PortfolioQuotes | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    availableCash: AmountToJSON(value.availableCash),
    cashAccountBalance: AmountToJSON(value.cashAccountBalance),
    positionValue: AmountToJSON(value.positionValue),
    profitLossAbs: AmountToJSON(value.profitLossAbs),
    profitLossAbsPrevClose: AmountToJSON(value.profitLossAbsPrevClose),
    profitLossRel: value.profitLossRel,
    profitLossRelPrevClose: value.profitLossRelPrevClose,
    totalValue: AmountToJSON(value.totalValue),
  };
}

export function PortfolioQuotesToJSON(value?: PortfolioQuotes | null): any {
  return PortfolioQuotesToJSONRecursive(value, false);
}
