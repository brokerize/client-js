/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Amount,
    AmountFromJSON,
    AmountFromJSONTyped,
    AmountToJSON,
} from './Amount';

/**
 * 
 * @export
 * @interface PortfolioQuotes
 */
export interface PortfolioQuotes {
    /**
     * 
     * @type {Amount}
     * @memberof PortfolioQuotes
     */
    profitLossAbsPrevClose?: Amount;
    /**
     * Relative P/L of all open positions, since prevClose (or buy, if that is later than prevClose). 1 means +100%
     * @type {number}
     * @memberof PortfolioQuotes
     */
    profitLossRelPrevClose?: number;
    /**
     * 
     * @type {Amount}
     * @memberof PortfolioQuotes
     */
    profitLossAbs?: Amount;
    /**
     * Relative P/L of all open positions, since acquisition. 1 means +100%
     * @type {number}
     * @memberof PortfolioQuotes
     */
    profitLossRel?: number;
    /**
     * 
     * @type {Amount}
     * @memberof PortfolioQuotes
     */
    totalValue?: Amount;
    /**
     * 
     * @type {Amount}
     * @memberof PortfolioQuotes
     */
    cashAccountBalance?: Amount;
    /**
     * 
     * @type {Amount}
     * @memberof PortfolioQuotes
     */
    availableCash?: Amount;
    /**
     * 
     * @type {Amount}
     * @memberof PortfolioQuotes
     */
    positionValue?: Amount;
}

export function PortfolioQuotesFromJSON(json: any): PortfolioQuotes {
    return PortfolioQuotesFromJSONTyped(json, false);
}

export function PortfolioQuotesFromJSONTyped(json: any, ignoreDiscriminator: boolean): PortfolioQuotes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'profitLossAbsPrevClose': !exists(json, 'profitLossAbsPrevClose') ? undefined : AmountFromJSON(json['profitLossAbsPrevClose']),
        'profitLossRelPrevClose': !exists(json, 'profitLossRelPrevClose') ? undefined : json['profitLossRelPrevClose'],
        'profitLossAbs': !exists(json, 'profitLossAbs') ? undefined : AmountFromJSON(json['profitLossAbs']),
        'profitLossRel': !exists(json, 'profitLossRel') ? undefined : json['profitLossRel'],
        'totalValue': !exists(json, 'totalValue') ? undefined : AmountFromJSON(json['totalValue']),
        'cashAccountBalance': !exists(json, 'cashAccountBalance') ? undefined : AmountFromJSON(json['cashAccountBalance']),
        'availableCash': !exists(json, 'availableCash') ? undefined : AmountFromJSON(json['availableCash']),
        'positionValue': !exists(json, 'positionValue') ? undefined : AmountFromJSON(json['positionValue']),
    };
}

export function PortfolioQuotesToJSONRecursive(value?: PortfolioQuotes | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'profitLossAbsPrevClose': AmountToJSON(value.profitLossAbsPrevClose),
        'profitLossRelPrevClose': value.profitLossRelPrevClose,
        'profitLossAbs': AmountToJSON(value.profitLossAbs),
        'profitLossRel': value.profitLossRel,
        'totalValue': AmountToJSON(value.totalValue),
        'cashAccountBalance': AmountToJSON(value.cashAccountBalance),
        'availableCash': AmountToJSON(value.availableCash),
        'positionValue': AmountToJSON(value.positionValue),
    };
}

export function PortfolioQuotesToJSON(value?: PortfolioQuotes | null): any {
    return PortfolioQuotesToJSONRecursive(value, false);
}
