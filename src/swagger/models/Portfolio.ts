/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  PortfolioSyncInfo,
  PortfolioSyncInfoFromJSON,
  PortfolioSyncInfoFromJSONTyped,
  PortfolioSyncInfoToJSON,
} from "./PortfolioSyncInfo";

/**
 *
 * @export
 * @interface Portfolio
 */
export interface Portfolio {
  /**
   * A portfolio idHash is a unique identifier used to represent a portfolio within a user account. The idHash is automatically generated based on the original broker id of the portfolio,
   * meaning that if a portfolio is synchronized into a new user account, it will usually retain the same idHash as in the old account (although it will be assigned a new globally unique id).
   * When applications use temporary or guest user accounts, it makes sense to use the idHash instead of the id to implement features like "last used portfolio" etc. This is because the idHash remains
   * the same even if the portfolio is synchronized into a new user account, whereas a new id will be assigned.
   *
   * It's important to note that the `idHash` is unique within a user account, meaning that no two portfolios within the same account can have the same idHash.
   * @type {string}
   * @memberof Portfolio
   */
  idHash: string;
  /**
   *
   * @type {PortfolioSyncInfo}
   * @memberof Portfolio
   */
  syncInfo: PortfolioSyncInfo;
  /**
   *
   * @type {Array<string>}
   * @memberof Portfolio
   */
  cashAccountIds: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Portfolio
   */
  sessionIds: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Portfolio
   */
  portfolioName: string;
  /**
   *
   * @type {string}
   * @memberof Portfolio
   */
  brokerName: string;
  /**
   *
   * @type {string}
   * @memberof Portfolio
   */
  id: string;
}

export function PortfolioFromJSON(json: any): Portfolio {
  return PortfolioFromJSONTyped(json, false);
}

export function PortfolioFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Portfolio {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    idHash: json["idHash"],
    syncInfo: PortfolioSyncInfoFromJSON(json["syncInfo"]),
    cashAccountIds: json["cashAccountIds"],
    sessionIds: json["sessionIds"],
    portfolioName: json["portfolioName"],
    brokerName: json["brokerName"],
    id: json["id"],
  };
}

export function PortfolioToJSONRecursive(
  value?: Portfolio | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    idHash: value.idHash,
    syncInfo: PortfolioSyncInfoToJSON(value.syncInfo),
    cashAccountIds: value.cashAccountIds,
    sessionIds: value.sessionIds,
    portfolioName: value.portfolioName,
    brokerName: value.brokerName,
    id: value.id,
  };
}

export function PortfolioToJSON(value?: Portfolio | null): any {
  return PortfolioToJSONRecursive(value, false);
}
