/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PortfolioSyncInfo,
    PortfolioSyncInfoFromJSON,
    PortfolioSyncInfoFromJSONTyped,
    PortfolioSyncInfoToJSON,
} from './PortfolioSyncInfo';

/**
 * 
 * @export
 * @interface Portfolio
 */
export interface Portfolio {
    /**
     * 
     * @type {PortfolioSyncInfo}
     * @memberof Portfolio
     */
    syncInfo: PortfolioSyncInfo;
    /**
     * 
     * @type {Array<string>}
     * @memberof Portfolio
     */
    cashAccountIds: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Portfolio
     */
    sessionIds: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Portfolio
     */
    portfolioName: string;
    /**
     * 
     * @type {string}
     * @memberof Portfolio
     */
    brokerName: string;
    /**
     * 
     * @type {string}
     * @memberof Portfolio
     */
    id: string;
}

export function PortfolioFromJSON(json: any): Portfolio {
    return PortfolioFromJSONTyped(json, false);
}

export function PortfolioFromJSONTyped(json: any, ignoreDiscriminator: boolean): Portfolio {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'syncInfo': PortfolioSyncInfoFromJSON(json['syncInfo']),
        'cashAccountIds': json['cashAccountIds'],
        'sessionIds': json['sessionIds'],
        'portfolioName': json['portfolioName'],
        'brokerName': json['brokerName'],
        'id': json['id'],
    };
}

export function PortfolioToJSONRecursive(value?: Portfolio | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'syncInfo': PortfolioSyncInfoToJSON(value.syncInfo),
        'cashAccountIds': value.cashAccountIds,
        'sessionIds': value.sessionIds,
        'portfolioName': value.portfolioName,
        'brokerName': value.brokerName,
        'id': value.id,
    };
}

export function PortfolioToJSON(value?: Portfolio | null): any {
    return PortfolioToJSONRecursive(value, false);
}
