/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AuthInfo,
    AuthInfoFromJSON,
    AuthInfoFromJSONTyped,
    AuthInfoToJSON,
} from './AuthInfo';
import {
    SessionSyncInfo,
    SessionSyncInfoFromJSON,
    SessionSyncInfoFromJSONTyped,
    SessionSyncInfoToJSON,
} from './SessionSyncInfo';
import {
    SyncError,
    SyncErrorFromJSON,
    SyncErrorFromJSONTyped,
    SyncErrorToJSON,
} from './SyncError';

/**
 * 
 * @export
 * @interface Session
 */
export interface Session {
    /**
     * 
     * @type {SessionSyncInfo}
     * @memberof Session
     */
    syncInfo: SessionSyncInfo;
    /**
     * 
     * @type {SyncError}
     * @memberof Session
     */
    syncError?: SyncError;
    /**
     * 
     * @type {AuthInfo}
     * @memberof Session
     */
    authInfo?: AuthInfo;
    /**
     * 
     * @type {Date}
     * @memberof Session
     * @deprecated
     */
    lastSuccessfulSync?: Date;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    brokerName: string;
    /**
     * 
     * @type {string}
     * @memberof Session
     */
    id: string;
}

export function SessionFromJSON(json: any): Session {
    return SessionFromJSONTyped(json, false);
}

export function SessionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Session {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'syncInfo': SessionSyncInfoFromJSON(json['syncInfo']),
        'syncError': !exists(json, 'syncError') ? undefined : SyncErrorFromJSON(json['syncError']),
        'authInfo': !exists(json, 'authInfo') ? undefined : AuthInfoFromJSON(json['authInfo']),
        'lastSuccessfulSync': !exists(json, 'lastSuccessfulSync') ? undefined : (new Date(json['lastSuccessfulSync'])),
        'brokerName': json['brokerName'],
        'id': json['id'],
    };
}

export function SessionToJSONRecursive(value?: Session | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'syncInfo': SessionSyncInfoToJSON(value.syncInfo),
        'syncError': SyncErrorToJSON(value.syncError),
        'authInfo': AuthInfoToJSON(value.authInfo),
        'lastSuccessfulSync': value.lastSuccessfulSync === undefined ? undefined : (value.lastSuccessfulSync.toISOString()),
        'brokerName': value.brokerName,
        'id': value.id,
    };
}

export function SessionToJSON(value?: Session | null): any {
    return SessionToJSONRecursive(value, false);
}
