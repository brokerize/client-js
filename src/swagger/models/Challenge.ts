/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Challenge
 */
export interface Challenge {
    /**
     * If the challenge needs further explanation, this may contain additional information to display to the user.
     * @type {string}
     * @memberof Challenge
     */
    challengeExplanation?: string;
    /**
     * 
     * @type {string}
     * @memberof Challenge
     */
    challengePrompt: string;
    /**
     * 
     * @type {string}
     * @memberof Challenge
     */
    challengePromptType: ChallengeChallengePromptTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Challenge
     */
    challengeId: string;
}


/**
 * @export
 */
export const ChallengeChallengePromptTypeEnum = {
    Text: 'text',
    Base64png: 'base64png'
} as const;
export type ChallengeChallengePromptTypeEnum = typeof ChallengeChallengePromptTypeEnum[keyof typeof ChallengeChallengePromptTypeEnum];


export function ChallengeFromJSON(json: any): Challenge {
    return ChallengeFromJSONTyped(json, false);
}

export function ChallengeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Challenge {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'challengeExplanation': !exists(json, 'challengeExplanation') ? undefined : json['challengeExplanation'],
        'challengePrompt': json['challengePrompt'],
        'challengePromptType': json['challengePromptType'],
        'challengeId': json['challengeId'],
    };
}

export function ChallengeToJSONRecursive(value?: Challenge | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'challengeExplanation': value.challengeExplanation,
        'challengePrompt': value.challengePrompt,
        'challengePromptType': value.challengePromptType,
        'challengeId': value.challengeId,
    };
}

export function ChallengeToJSON(value?: Challenge | null): any {
    return ChallengeToJSONRecursive(value, false);
}
