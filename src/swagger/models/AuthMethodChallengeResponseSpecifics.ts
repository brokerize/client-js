/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 1.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface AuthMethodChallengeResponseSpecifics
 */
export interface AuthMethodChallengeResponseSpecifics {
  /**
   *
   * @type {string}
   * @memberof AuthMethodChallengeResponseSpecifics
   */
  challengeLabel?: string;
  /**
   *
   * @type {boolean}
   * @memberof AuthMethodChallengeResponseSpecifics
   */
  challengeResponseIsOnlyConfirmation?: boolean;
  /**
   *
   * @type {string}
   * @memberof AuthMethodChallengeResponseSpecifics
   */
  getChallengeLabel?: string;
  /**
   * If this is true, the auth method should not be offered to users on phones (e.g. for photoTAN, where the TAN has to
   * be scanned with a phone).
   * @type {boolean}
   * @memberof AuthMethodChallengeResponseSpecifics
   */
  hideOnPhones?: boolean;
  /**
   *
   * @type {string}
   * @memberof AuthMethodChallengeResponseSpecifics
   */
  id?: string;
  /**
   *
   * @type {boolean}
   * @memberof AuthMethodChallengeResponseSpecifics
   */
  isDefaultMethod?: boolean;
  /**
   *
   * @type {string}
   * @memberof AuthMethodChallengeResponseSpecifics
   */
  label?: string;
  /**
   *
   * @type {string}
   * @memberof AuthMethodChallengeResponseSpecifics
   */
  tanFieldLabel?: string;
}

export function AuthMethodChallengeResponseSpecificsFromJSON(
  json: any
): AuthMethodChallengeResponseSpecifics {
  return AuthMethodChallengeResponseSpecificsFromJSONTyped(json, false);
}

export function AuthMethodChallengeResponseSpecificsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): AuthMethodChallengeResponseSpecifics {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    challengeLabel: !exists(json, "challengeLabel")
      ? undefined
      : json["challengeLabel"],
    challengeResponseIsOnlyConfirmation: !exists(
      json,
      "challengeResponseIsOnlyConfirmation"
    )
      ? undefined
      : json["challengeResponseIsOnlyConfirmation"],
    getChallengeLabel: !exists(json, "getChallengeLabel")
      ? undefined
      : json["getChallengeLabel"],
    hideOnPhones: !exists(json, "hideOnPhones")
      ? undefined
      : json["hideOnPhones"],
    id: !exists(json, "id") ? undefined : json["id"],
    isDefaultMethod: !exists(json, "isDefaultMethod")
      ? undefined
      : json["isDefaultMethod"],
    label: !exists(json, "label") ? undefined : json["label"],
    tanFieldLabel: !exists(json, "tanFieldLabel")
      ? undefined
      : json["tanFieldLabel"],
  };
}

export function AuthMethodChallengeResponseSpecificsToJSONRecursive(
  value?: AuthMethodChallengeResponseSpecifics | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    challengeLabel: value.challengeLabel,
    challengeResponseIsOnlyConfirmation:
      value.challengeResponseIsOnlyConfirmation,
    getChallengeLabel: value.getChallengeLabel,
    hideOnPhones: value.hideOnPhones,
    id: value.id,
    isDefaultMethod: value.isDefaultMethod,
    label: value.label,
    tanFieldLabel: value.tanFieldLabel,
  };
}

export function AuthMethodChallengeResponseSpecificsToJSON(
  value?: AuthMethodChallengeResponseSpecifics | null
): any {
  return AuthMethodChallengeResponseSpecificsToJSONRecursive(value, false);
}
