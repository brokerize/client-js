/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 1.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface DemoAccountSettings
 */
export interface DemoAccountSettings {
  /**
   * Set this to `true` to create a single depot instead of the default two
   * @type {boolean}
   * @memberof DemoAccountSettings
   */
  isSinglePortfolio?: boolean;
  /**
   * Set this to `true` to have the demo account reveal the complete list of auth methods only after
   * the first session TAN challenge request.
   *
   * This also sets `allOperationsRequireSessionTan` to `true` for the account.
   * @type {boolean}
   * @memberof DemoAccountSettings
   */
  lazyAuthMethods?: boolean;
  /**
   * If this is `true`, the first portfolio in the new account will be seeded with an old cancelled order. This can
   * be used to test whether the frontend appropriately reloads orders when the sync is completed over time.
   *
   * Note that the behavior is not yet specified here and may be refined in the future.
   * @type {boolean}
   * @memberof DemoAccountSettings
   */
  seedOrders?: boolean;
  /**
   * Set this to `true` to disallow ending session TANs.
   * @type {boolean}
   * @memberof DemoAccountSettings
   */
  sessionTanCannotBeEnded?: boolean;
}

export function DemoAccountSettingsFromJSON(json: any): DemoAccountSettings {
  return DemoAccountSettingsFromJSONTyped(json, false);
}

export function DemoAccountSettingsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): DemoAccountSettings {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    isSinglePortfolio: !exists(json, "isSinglePortfolio")
      ? undefined
      : json["isSinglePortfolio"],
    lazyAuthMethods: !exists(json, "lazyAuthMethods")
      ? undefined
      : json["lazyAuthMethods"],
    seedOrders: !exists(json, "seedOrders") ? undefined : json["seedOrders"],
    sessionTanCannotBeEnded: !exists(json, "sessionTanCannotBeEnded")
      ? undefined
      : json["sessionTanCannotBeEnded"],
  };
}

export function DemoAccountSettingsToJSONRecursive(
  value?: DemoAccountSettings | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    isSinglePortfolio: value.isSinglePortfolio,
    lazyAuthMethods: value.lazyAuthMethods,
    seedOrders: value.seedOrders,
    sessionTanCannotBeEnded: value.sessionTanCannotBeEnded,
  };
}

export function DemoAccountSettingsToJSON(
  value?: DemoAccountSettings | null
): any {
  return DemoAccountSettingsToJSONRecursive(value, false);
}
