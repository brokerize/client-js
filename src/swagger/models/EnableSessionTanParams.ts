/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    EnableSessionTanParamsChallengeResponse,
    EnableSessionTanParamsChallengeResponseFromJSON,
    EnableSessionTanParamsChallengeResponseFromJSONTyped,
    EnableSessionTanParamsChallengeResponseToJSON,
} from './EnableSessionTanParamsChallengeResponse';
import {
    EnableSessionTanParamsDecoupled,
    EnableSessionTanParamsDecoupledFromJSON,
    EnableSessionTanParamsDecoupledFromJSONTyped,
    EnableSessionTanParamsDecoupledToJSON,
} from './EnableSessionTanParamsDecoupled';
import {
    EnableSessionTanParamsTan,
    EnableSessionTanParamsTanFromJSON,
    EnableSessionTanParamsTanFromJSONTyped,
    EnableSessionTanParamsTanToJSON,
} from './EnableSessionTanParamsTan';

/**
 * @type EnableSessionTanParams
 * 
 * @export
 */
export type EnableSessionTanParams = { kind: 'challengeResponse' } & EnableSessionTanParamsChallengeResponse | { kind: 'decoupled' } & EnableSessionTanParamsDecoupled | { kind: 'tan' } & EnableSessionTanParamsTan;

export function EnableSessionTanParamsFromJSON(json: any): EnableSessionTanParams {
    return EnableSessionTanParamsFromJSONTyped(json, false);
}

export function EnableSessionTanParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnableSessionTanParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['kind']) {
        case 'challengeResponse':
            return {...EnableSessionTanParamsChallengeResponseFromJSONTyped(json, true), kind: 'challengeResponse'};
        case 'decoupled':
            return {...EnableSessionTanParamsDecoupledFromJSONTyped(json, true), kind: 'decoupled'};
        case 'tan':
            return {...EnableSessionTanParamsTanFromJSONTyped(json, true), kind: 'tan'};
        default:
            throw new Error(`No variant of EnableSessionTanParams exists with 'kind=${json['kind']}'`);
    }
}

export function EnableSessionTanParamsToJSON(value?: EnableSessionTanParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['kind']) {
        case 'challengeResponse':
            return EnableSessionTanParamsChallengeResponseToJSON(value);
        case 'decoupled':
            return EnableSessionTanParamsDecoupledToJSON(value);
        case 'tan':
            return EnableSessionTanParamsTanToJSON(value);
        default:
            throw new Error(`No variant of EnableSessionTanParams exists with 'kind=${value['kind']}'`);
    }
}

