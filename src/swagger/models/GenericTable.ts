/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CostDetailsLink,
    CostDetailsLinkFromJSON,
    CostDetailsLinkFromJSONTyped,
    CostDetailsLinkToJSON,
} from './CostDetailsLink';
import {
    GenericTableRow,
    GenericTableRowFromJSON,
    GenericTableRowFromJSONTyped,
    GenericTableRowToJSON,
} from './GenericTableRow';

/**
 * 
 * @export
 * @interface GenericTable
 */
export interface GenericTable {
    /**
     * 
     * @type {CostDetailsLink}
     * @memberof GenericTable
     */
    detailsLink?: CostDetailsLink;
    /**
     * 
     * @type {string}
     * @memberof GenericTable
     */
    footerHtml?: string;
    /**
     * 
     * @type {Array<GenericTableRow>}
     * @memberof GenericTable
     */
    rows?: Array<GenericTableRow>;
}

export function GenericTableFromJSON(json: any): GenericTable {
    return GenericTableFromJSONTyped(json, false);
}

export function GenericTableFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenericTable {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'detailsLink': !exists(json, 'detailsLink') ? undefined : CostDetailsLinkFromJSON(json['detailsLink']),
        'footerHtml': !exists(json, 'footerHtml') ? undefined : json['footerHtml'],
        'rows': !exists(json, 'rows') ? undefined : ((json['rows'] as Array<any>).map(GenericTableRowFromJSON)),
    };
}

export function GenericTableToJSONRecursive(value?: GenericTable | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'detailsLink': CostDetailsLinkToJSON(value.detailsLink),
        'footerHtml': value.footerHtml,
        'rows': value.rows === undefined ? undefined : ((value.rows as Array<any>).map(GenericTableRowToJSON)),
    };
}

export function GenericTableToJSON(value?: GenericTable | null): any {
    return GenericTableToJSONRecursive(value, false);
}
