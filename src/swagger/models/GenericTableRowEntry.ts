/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GenericTableRowEntryAllOf,
    GenericTableRowEntryAllOfFromJSON,
    GenericTableRowEntryAllOfFromJSONTyped,
    GenericTableRowEntryAllOfToJSON,
} from './GenericTableRowEntryAllOf';
import {
    GenericTableRowEntrySpecifics,
    GenericTableRowEntrySpecificsFromJSON,
    GenericTableRowEntrySpecificsFromJSONTyped,
    GenericTableRowEntrySpecificsToJSON,
} from './GenericTableRowEntrySpecifics';
import {
    GenericTableRowValue,
    GenericTableRowValueFromJSON,
    GenericTableRowValueFromJSONTyped,
    GenericTableRowValueToJSON,
} from './GenericTableRowValue';

/**
 * 
 * @export
 * @interface GenericTableRowEntry
 */
export interface GenericTableRowEntry {
    /**
     * 
     * @type {string}
     * @memberof GenericTableRowEntry
     */
    type: GenericTableRowEntryTypeEnum;
    /**
     * 
     * @type {GenericTableRowValue}
     * @memberof GenericTableRowEntry
     */
    value?: GenericTableRowValue;
    /**
     * 
     * @type {boolean}
     * @memberof GenericTableRowEntry
     */
    isImportant?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GenericTableRowEntry
     */
    caption: string;
    /**
     * 
     * @type {string}
     * @memberof GenericTableRowEntry
     */
    id?: string;
}


/**
 * @export
 */
export const GenericTableRowEntryTypeEnum = {
    Entry: 'entry'
} as const;
export type GenericTableRowEntryTypeEnum = typeof GenericTableRowEntryTypeEnum[keyof typeof GenericTableRowEntryTypeEnum];


export function GenericTableRowEntryFromJSON(json: any): GenericTableRowEntry {
    return GenericTableRowEntryFromJSONTyped(json, false);
}

export function GenericTableRowEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenericTableRowEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'value': !exists(json, 'value') ? undefined : GenericTableRowValueFromJSON(json['value']),
        'isImportant': !exists(json, 'isImportant') ? undefined : json['isImportant'],
        'caption': json['caption'],
        'id': !exists(json, 'id') ? undefined : json['id'],
    };
}

export function GenericTableRowEntryToJSONRecursive(value?: GenericTableRowEntry | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'type': value.type,
        'value': GenericTableRowValueToJSON(value.value),
        'isImportant': value.isImportant,
        'caption': value.caption,
        'id': value.id,
    };
}

export function GenericTableRowEntryToJSON(value?: GenericTableRowEntry | null): any {
    return GenericTableRowEntryToJSONRecursive(value, false);
}
