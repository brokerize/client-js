/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  SecuritySelector,
  SecuritySelectorFromJSON,
  SecuritySelectorFromJSONTyped,
  SecuritySelectorToJSON,
} from "./SecuritySelector";

/**
 * A security's basic data like symbols and names.
 * @export
 * @interface Security
 */
export interface Security {
  /**
   * The crypto code string if the security is `sizeKind=crypto`. E.g. 'BTC'
   * @type {string}
   * @memberof Security
   * @deprecated
   */
  cryptoCode?: string;
  /**
   *
   * @type {string}
   * @memberof Security
   * @deprecated
   */
  isin?: string;
  /**
   *
   * @type {string}
   * @memberof Security
   */
  name?: string;
  /**
   * If provided, the security's quote has to be multiplied to get the actual cash counter value. This information
   * can be used to determine whether custom calculations can be done for the security in frontends.
   * @type {number}
   * @memberof Security
   */
  priceFactor?: number;
  /**
   *
   * @type {SecuritySelector}
   * @memberof Security
   */
  selector: SecuritySelector;
  /**
   * The security`s symbol as used by broker "sino" (this can be used to implement broker-specific security matching behavior)
   * @type {string}
   * @memberof Security
   * @deprecated
   */
  sinoTicker?: string;
  /**
   * If `sizeUnit` is a currency, the corresponding size field in UIs should be labeled with that selected currency.
   * - for bonds `sizeKind="bond"`, the label should be (for example) like "nominal amount in EUR"
   * - for crypto currencies `sizeKind="crypto"`, the label should be (for example) like "amount in EUR"
   * @type {string}
   * @memberof Security
   */
  sizeKind?: SecuritySizeKindEnum;
  /**
   *
   * @type {string}
   * @memberof Security
   * @deprecated
   */
  symbol?: string;
  /**
   *
   * @type {string}
   * @memberof Security
   * @deprecated
   */
  usTicker?: string;
  /**
   *
   * @type {string}
   * @memberof Security
   * @deprecated
   */
  wkn?: string;
}

/**
 * @export
 */
export const SecuritySizeKindEnum = {
  Bond: "bond",
  Crypto: "crypto",
} as const;
export type SecuritySizeKindEnum =
  (typeof SecuritySizeKindEnum)[keyof typeof SecuritySizeKindEnum];

export function SecurityFromJSON(json: any): Security {
  return SecurityFromJSONTyped(json, false);
}

export function SecurityFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Security {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    cryptoCode: !exists(json, "cryptoCode") ? undefined : json["cryptoCode"],
    isin: !exists(json, "isin") ? undefined : json["isin"],
    name: !exists(json, "name") ? undefined : json["name"],
    priceFactor: !exists(json, "priceFactor") ? undefined : json["priceFactor"],
    selector: SecuritySelectorFromJSON(json["selector"]),
    sinoTicker: !exists(json, "sinoTicker") ? undefined : json["sinoTicker"],
    sizeKind: !exists(json, "sizeKind") ? undefined : json["sizeKind"],
    symbol: !exists(json, "symbol") ? undefined : json["symbol"],
    usTicker: !exists(json, "usTicker") ? undefined : json["usTicker"],
    wkn: !exists(json, "wkn") ? undefined : json["wkn"],
  };
}

export function SecurityToJSONRecursive(
  value?: Security | null,
  ignoreParent = false
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }

  return {
    cryptoCode: value.cryptoCode,
    isin: value.isin,
    name: value.name,
    priceFactor: value.priceFactor,
    selector: SecuritySelectorToJSON(value.selector),
    sinoTicker: value.sinoTicker,
    sizeKind: value.sizeKind,
    symbol: value.symbol,
    usTicker: value.usTicker,
    wkn: value.wkn,
  };
}

export function SecurityToJSON(value?: Security | null): any {
  return SecurityToJSONRecursive(value, false);
}
