/* tslint:disable */
/* eslint-disable */
/**
 * brokerize
 * The brokerize API allows clients to implement multi-brokerage with a unified interface. For more information, visit brokerize.com
 *
 * The version of the OpenAPI document: 0.0.1-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GenericTableRowTextAllOf,
    GenericTableRowTextAllOfFromJSON,
    GenericTableRowTextAllOfFromJSONTyped,
    GenericTableRowTextAllOfToJSON,
} from './GenericTableRowTextAllOf';
import {
    GenericTableRowValueTextSpecifics,
    GenericTableRowValueTextSpecificsFromJSON,
    GenericTableRowValueTextSpecificsFromJSONTyped,
    GenericTableRowValueTextSpecificsToJSON,
} from './GenericTableRowValueTextSpecifics';

/**
 * 
 * @export
 * @interface GenericTableRowValueText
 */
export interface GenericTableRowValueText {
    /**
     * 
     * @type {string}
     * @memberof GenericTableRowValueText
     */
    type: GenericTableRowValueTextTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GenericTableRowValueText
     */
    value: string;
}


/**
 * @export
 */
export const GenericTableRowValueTextTypeEnum = {
    Text: 'text'
} as const;
export type GenericTableRowValueTextTypeEnum = typeof GenericTableRowValueTextTypeEnum[keyof typeof GenericTableRowValueTextTypeEnum];


export function GenericTableRowValueTextFromJSON(json: any): GenericTableRowValueText {
    return GenericTableRowValueTextFromJSONTyped(json, false);
}

export function GenericTableRowValueTextFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenericTableRowValueText {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'value': json['value'],
    };
}

export function GenericTableRowValueTextToJSONRecursive(value?: GenericTableRowValueText | null, ignoreParent = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    return {
        


        'type': value.type,
        'value': value.value,
    };
}

export function GenericTableRowValueTextToJSON(value?: GenericTableRowValueText | null): any {
    return GenericTableRowValueTextToJSONRecursive(value, false);
}
